
project_mpu6050sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005bf0  08005bf0  00006bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce8  08005ce8  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ce8  08005ce8  00006ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cf0  08005cf0  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cf0  08005cf0  00006cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cf4  08005cf4  00006cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005cf8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007070  2**0
                  CONTENTS
 10 .bss          0000021c  20000070  20000070  00007070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000028c  2000028c  00007070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ceb1  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e6b  00000000  00000000  00013f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00015dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a74  00000000  00000000  00016b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221b4  00000000  00000000  000175a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000101a4  00000000  00000000  00039758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd77e  00000000  00000000  000498fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011707a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042c0  00000000  00000000  001170c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0011b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bd8 	.word	0x08005bd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005bd8 	.word	0x08005bd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96a 	b.w	8000ea8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14e      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	458c      	cmp	ip, r1
 8000bfc:	4686      	mov	lr, r0
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	d962      	bls.n	8000cca <__udivmoddi4+0xde>
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	4319      	orrs	r1, r3
 8000c16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f f68c 	uxth.w	r6, ip
 8000c22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb04 f106 	mul.w	r1, r4, r6
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c42:	f080 8112 	bcs.w	8000e6a <__udivmoddi4+0x27e>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 810f 	bls.w	8000e6a <__udivmoddi4+0x27e>
 8000c4c:	3c02      	subs	r4, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f606 	mul.w	r6, r0, r6
 8000c66:	429e      	cmp	r6, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x94>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c72:	f080 80fc 	bcs.w	8000e6e <__udivmoddi4+0x282>
 8000c76:	429e      	cmp	r6, r3
 8000c78:	f240 80f9 	bls.w	8000e6e <__udivmoddi4+0x282>
 8000c7c:	4463      	add	r3, ip
 8000c7e:	3802      	subs	r0, #2
 8000c80:	1b9b      	subs	r3, r3, r6
 8000c82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c86:	2100      	movs	r1, #0
 8000c88:	b11d      	cbz	r5, 8000c92 <__udivmoddi4+0xa6>
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d905      	bls.n	8000ca6 <__udivmoddi4+0xba>
 8000c9a:	b10d      	cbz	r5, 8000ca0 <__udivmoddi4+0xb4>
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e7f5      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d146      	bne.n	8000d3c <__udivmoddi4+0x150>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xcc>
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f0c0 80f0 	bcc.w	8000e98 <__udivmoddi4+0x2ac>
 8000cb8:	1a86      	subs	r6, r0, r2
 8000cba:	eb64 0303 	sbc.w	r3, r4, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d0e6      	beq.n	8000c92 <__udivmoddi4+0xa6>
 8000cc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc8:	e7e3      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f040 8090 	bne.w	8000df0 <__udivmoddi4+0x204>
 8000cd0:	eba1 040c 	sub.w	r4, r1, ip
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa1f f78c 	uxth.w	r7, ip
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb07 f006 	mul.w	r0, r7, r6
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x11c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x11a>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d06:	4626      	mov	r6, r4
 8000d08:	1a1c      	subs	r4, r3, r0
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d12:	fb08 4410 	mls	r4, r8, r0, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb00 f707 	mul.w	r7, r0, r7
 8000d1e:	429f      	cmp	r7, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x148>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x146>
 8000d2c:	429f      	cmp	r7, r3
 8000d2e:	f200 80b0 	bhi.w	8000e92 <__udivmoddi4+0x2a6>
 8000d32:	4620      	mov	r0, r4
 8000d34:	1bdb      	subs	r3, r3, r7
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0x9c>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 f706 	lsr.w	r7, r2, r6
 8000d46:	431f      	orrs	r7, r3
 8000d48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d50:	ea43 030c 	orr.w	r3, r3, ip
 8000d54:	40f4      	lsrs	r4, r6
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d60:	fbb4 fef0 	udiv	lr, r4, r0
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fb00 441e 	mls	r4, r0, lr, r4
 8000d6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d70:	fb0e f90c 	mul.w	r9, lr, ip
 8000d74:	45a1      	cmp	r9, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	d90a      	bls.n	8000d92 <__udivmoddi4+0x1a6>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d82:	f080 8084 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000d86:	45a1      	cmp	r9, r4
 8000d88:	f240 8081 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000d8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000da2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1d2>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db4:	d267      	bcs.n	8000e86 <__udivmoddi4+0x29a>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d965      	bls.n	8000e86 <__udivmoddi4+0x29a>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc6:	eba4 040c 	sub.w	r4, r4, ip
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	46ce      	mov	lr, r9
 8000dce:	469c      	mov	ip, r3
 8000dd0:	d351      	bcc.n	8000e76 <__udivmoddi4+0x28a>
 8000dd2:	d04e      	beq.n	8000e72 <__udivmoddi4+0x286>
 8000dd4:	b155      	cbz	r5, 8000dec <__udivmoddi4+0x200>
 8000dd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dda:	eb64 040c 	sbc.w	r4, r4, ip
 8000dde:	fa04 f606 	lsl.w	r6, r4, r6
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431e      	orrs	r6, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e750      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000e00:	4094      	lsls	r4, r2
 8000e02:	430c      	orrs	r4, r1
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0c:	fa1f f78c 	uxth.w	r7, ip
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3110 	mls	r1, r8, r0, r3
 8000e18:	0c23      	lsrs	r3, r4, #16
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb00 f107 	mul.w	r1, r0, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x24c>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2e:	d22c      	bcs.n	8000e8a <__udivmoddi4+0x29e>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d92a      	bls.n	8000e8a <__udivmoddi4+0x29e>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e40:	fb08 3311 	mls	r3, r8, r1, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb01 f307 	mul.w	r3, r1, r7
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x276>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e58:	d213      	bcs.n	8000e82 <__udivmoddi4+0x296>
 8000e5a:	42a3      	cmp	r3, r4
 8000e5c:	d911      	bls.n	8000e82 <__udivmoddi4+0x296>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	1ae4      	subs	r4, r4, r3
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e739      	b.n	8000cde <__udivmoddi4+0xf2>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e6f0      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e706      	b.n	8000c80 <__udivmoddi4+0x94>
 8000e72:	45c8      	cmp	r8, r9
 8000e74:	d2ae      	bcs.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7e:	3801      	subs	r0, #1
 8000e80:	e7a8      	b.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e82:	4631      	mov	r1, r6
 8000e84:	e7ed      	b.n	8000e62 <__udivmoddi4+0x276>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e799      	b.n	8000dbe <__udivmoddi4+0x1d2>
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	e7d4      	b.n	8000e38 <__udivmoddi4+0x24c>
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	e77f      	b.n	8000d92 <__udivmoddi4+0x1a6>
 8000e92:	4463      	add	r3, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e74d      	b.n	8000d34 <__udivmoddi4+0x148>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e70f      	b.n	8000cc0 <__udivmoddi4+0xd4>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	e730      	b.n	8000d08 <__udivmoddi4+0x11c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_TIM_PeriodElapsedCallback>:
extern uint32_t g_counter;
extern uint32_t g_channel_1_state;
extern uint32_t g_channel_2_state;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  g_counter = 0;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
  g_channel_1_state = 32000;
 8000eba:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ebc:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000ec0:	601a      	str	r2, [r3, #0]
  g_channel_2_state = 16000;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ec4:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000ec8:	601a      	str	r2, [r3, #0]

}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000128 	.word	0x20000128
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7f1b      	ldrb	r3, [r3, #28]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d102      	bne.n	8000efa <HAL_TIM_PWM_PulseFinishedCallback+0x16>
	  g_channel_1_state = 0;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7f1b      	ldrb	r3, [r3, #28]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d102      	bne.n	8000f08 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
  	  g_channel_2_state = 0;
 8000f02:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
    }

}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000004 	.word	0x20000004
 8000f1c:	00000000 	.word	0x00000000

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f26:	f000 fd33 	bl	8001990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2a:	f000 f87f 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2e:	f000 f98f 	bl	8001250 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000f32:	f000 f907 	bl	8001144 <MX_TIM4_Init>
  MX_I2C3_Init();
 8000f36:	f000 f8d7 	bl	80010e8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  if(mpu6050_init(&hi2c3, MPU6050_I2C_ADDR) != MPU6050_OK){
 8000f3a:	2168      	movs	r1, #104	@ 0x68
 8000f3c:	4836      	ldr	r0, [pc, #216]	@ (8001018 <main+0xf8>)
 8000f3e:	f000 fa39 	bl	80013b4 <mpu6050_init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <main+0x2c>
	  Error_Handler();
 8000f48:	f000 f9b8 	bl	80012bc <Error_Handler>
  }

  if (mpu6050_configure_lpf(&hi2c3,DLPF_CFG_21HZ) != MPU6050_OK) {
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	4832      	ldr	r0, [pc, #200]	@ (8001018 <main+0xf8>)
 8000f50:	f000 fae1 	bl	8001516 <mpu6050_configure_lpf>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <main+0x3e>
 	  Error_Handler();
 8000f5a:	f000 f9af 	bl	80012bc <Error_Handler>
   }

  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800101c <main+0xfc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	4b2d      	ldr	r3, [pc, #180]	@ (800101c <main+0xfc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 0201 	orr.w	r2, r2, #1
 8000f6c:	60da      	str	r2, [r3, #12]

  if(HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1)!= HAL_OK){
 8000f6e:	2100      	movs	r1, #0
 8000f70:	482a      	ldr	r0, [pc, #168]	@ (800101c <main+0xfc>)
 8000f72:	f002 fd3d 	bl	80039f0 <HAL_TIM_PWM_Start_IT>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <main+0x60>
	  Error_Handler();
 8000f7c:	f000 f99e 	bl	80012bc <Error_Handler>
  }

  if(HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2)!= HAL_OK){
 8000f80:	2104      	movs	r1, #4
 8000f82:	4826      	ldr	r0, [pc, #152]	@ (800101c <main+0xfc>)
 8000f84:	f002 fd34 	bl	80039f0 <HAL_TIM_PWM_Start_IT>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <main+0x72>
  	  Error_Handler();
 8000f8e:	f000 f995 	bl	80012bc <Error_Handler>
  {
#ifdef PWM_DEBUG
	g_counter = __HAL_TIM_GET_COUNTER(&htim4);
#endif

	if(mpu6050_read_accelerometer_data(&hi2c3, MPU6050_I2C_ADDR, &g_accel_data) != MPU6050_OK){
 8000f92:	4a23      	ldr	r2, [pc, #140]	@ (8001020 <main+0x100>)
 8000f94:	2168      	movs	r1, #104	@ 0x68
 8000f96:	4820      	ldr	r0, [pc, #128]	@ (8001018 <main+0xf8>)
 8000f98:	f000 fa50 	bl	800143c <mpu6050_read_accelerometer_data>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <main+0x86>
		Error_Handler();
 8000fa2:	f000 f98b 	bl	80012bc <Error_Handler>
	}

	g_accel_data = mpu6050_accel_calibration(&error_offset, &g_accel_data);
 8000fa6:	4c1e      	ldr	r4, [pc, #120]	@ (8001020 <main+0x100>)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4a1d      	ldr	r2, [pc, #116]	@ (8001020 <main+0x100>)
 8000fac:	491d      	ldr	r1, [pc, #116]	@ (8001024 <main+0x104>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fa79 	bl	80014a6 <mpu6050_accel_calibration>
 8000fb4:	4622      	mov	r2, r4
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	6010      	str	r0, [r2, #0]
 8000fbc:	889b      	ldrh	r3, [r3, #4]
 8000fbe:	8093      	strh	r3, [r2, #4]

	roll_angle = atan2(g_accel_data.y, g_accel_data.z)* (180.0/M_PI);
 8000fc0:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <main+0x100>)
 8000fc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff faa4 	bl	8000514 <__aeabi_i2d>
 8000fcc:	4604      	mov	r4, r0
 8000fce:	460d      	mov	r5, r1
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <main+0x100>)
 8000fd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fa9c 	bl	8000514 <__aeabi_i2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	ec43 2b11 	vmov	d1, r2, r3
 8000fe4:	ec45 4b10 	vmov	d0, r4, r5
 8000fe8:	f004 fb8c 	bl	8005704 <atan2>
 8000fec:	ec51 0b10 	vmov	r0, r1, d0
 8000ff0:	a307      	add	r3, pc, #28	@ (adr r3, 8001010 <main+0xf0>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	f7ff faf7 	bl	80005e8 <__aeabi_dmul>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fd8b 	bl	8000b1c <__aeabi_d2f>
 8001006:	4603      	mov	r3, r0
 8001008:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <main+0x108>)
 800100a:	6013      	str	r3, [r2, #0]
	if(mpu6050_read_accelerometer_data(&hi2c3, MPU6050_I2C_ADDR, &g_accel_data) != MPU6050_OK){
 800100c:	e7c1      	b.n	8000f92 <main+0x72>
 800100e:	bf00      	nop
 8001010:	1a63c1f8 	.word	0x1a63c1f8
 8001014:	404ca5dc 	.word	0x404ca5dc
 8001018:	2000008c 	.word	0x2000008c
 800101c:	200000e0 	.word	0x200000e0
 8001020:	20000130 	.word	0x20000130
 8001024:	08005c20 	.word	0x08005c20
 8001028:	2000012c 	.word	0x2000012c

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	@ 0x50
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	2230      	movs	r2, #48	@ 0x30
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f003 fd49 	bl	8004ad2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <SystemClock_Config+0xb4>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	4a21      	ldr	r2, [pc, #132]	@ (80010e0 <SystemClock_Config+0xb4>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800105e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001060:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <SystemClock_Config+0xb4>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <SystemClock_Config+0xb8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <SystemClock_Config+0xb8>)
 8001076:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <SystemClock_Config+0xb8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001088:	2302      	movs	r3, #2
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001090:	2310      	movs	r3, #16
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001094:	2300      	movs	r3, #0
 8001096:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	4618      	mov	r0, r3
 800109e:	f001 ffbb 	bl	8003018 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010a8:	f000 f908 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fa1e 	bl	8003508 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010d2:	f000 f8f3 	bl	80012bc <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3750      	adds	r7, #80	@ 0x50
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000

080010e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_I2C3_Init+0x50>)
 80010ee:	4a13      	ldr	r2, [pc, #76]	@ (800113c <MX_I2C3_Init+0x54>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <MX_I2C3_Init+0x50>)
 80010f4:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <MX_I2C3_Init+0x58>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <MX_I2C3_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <MX_I2C3_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <MX_I2C3_Init+0x50>)
 8001106:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800110a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800110c:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <MX_I2C3_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001112:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <MX_I2C3_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001118:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <MX_I2C3_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_I2C3_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	@ (8001138 <MX_I2C3_Init+0x50>)
 8001126:	f000 ff53 	bl	8001fd0 <HAL_I2C_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001130:	f000 f8c4 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000008c 	.word	0x2000008c
 800113c:	40005c00 	.word	0x40005c00
 8001140:	000186a0 	.word	0x000186a0

08001144 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	@ 0x38
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001174:	4b34      	ldr	r3, [pc, #208]	@ (8001248 <MX_TIM4_Init+0x104>)
 8001176:	4a35      	ldr	r2, [pc, #212]	@ (800124c <MX_TIM4_Init+0x108>)
 8001178:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 199;
 800117a:	4b33      	ldr	r3, [pc, #204]	@ (8001248 <MX_TIM4_Init+0x104>)
 800117c:	22c7      	movs	r2, #199	@ 0xc7
 800117e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <MX_TIM4_Init+0x104>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39999;
 8001186:	4b30      	ldr	r3, [pc, #192]	@ (8001248 <MX_TIM4_Init+0x104>)
 8001188:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800118c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118e:	4b2e      	ldr	r3, [pc, #184]	@ (8001248 <MX_TIM4_Init+0x104>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b2c      	ldr	r3, [pc, #176]	@ (8001248 <MX_TIM4_Init+0x104>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800119a:	482b      	ldr	r0, [pc, #172]	@ (8001248 <MX_TIM4_Init+0x104>)
 800119c:	f002 fb80 	bl	80038a0 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80011a6:	f000 f889 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4824      	ldr	r0, [pc, #144]	@ (8001248 <MX_TIM4_Init+0x104>)
 80011b8:	f002 fee2 	bl	8003f80 <HAL_TIM_ConfigClockSource>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80011c2:	f000 f87b 	bl	80012bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011c6:	4820      	ldr	r0, [pc, #128]	@ (8001248 <MX_TIM4_Init+0x104>)
 80011c8:	f002 fbb9 	bl	800393e <HAL_TIM_PWM_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80011d2:	f000 f873 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011d6:	2320      	movs	r3, #32
 80011d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	4619      	mov	r1, r3
 80011e4:	4818      	ldr	r0, [pc, #96]	@ (8001248 <MX_TIM4_Init+0x104>)
 80011e6:	f003 facd 	bl	8004784 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80011f0:	f000 f864 	bl	80012bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f4:	2360      	movs	r3, #96	@ 0x60
 80011f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32000;
 80011f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80011fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	480e      	ldr	r0, [pc, #56]	@ (8001248 <MX_TIM4_Init+0x104>)
 800120e:	f002 fdf5 	bl	8003dfc <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001218:	f000 f850 	bl	80012bc <Error_Handler>
  }
  sConfigOC.Pulse = 16000;
 800121c:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2204      	movs	r2, #4
 8001226:	4619      	mov	r1, r3
 8001228:	4807      	ldr	r0, [pc, #28]	@ (8001248 <MX_TIM4_Init+0x104>)
 800122a:	f002 fde7 	bl	8003dfc <HAL_TIM_PWM_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001234:	f000 f842 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001238:	4803      	ldr	r0, [pc, #12]	@ (8001248 <MX_TIM4_Init+0x104>)
 800123a:	f000 fa55 	bl	80016e8 <HAL_TIM_MspPostInit>

}
 800123e:	bf00      	nop
 8001240:	3738      	adds	r7, #56	@ 0x38
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200000e0 	.word	0x200000e0
 800124c:	40000800 	.word	0x40000800

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <MX_GPIO_Init+0x68>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a16      	ldr	r2, [pc, #88]	@ (80012b8 <MX_GPIO_Init+0x68>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <MX_GPIO_Init+0x68>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <MX_GPIO_Init+0x68>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a0f      	ldr	r2, [pc, #60]	@ (80012b8 <MX_GPIO_Init+0x68>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <MX_GPIO_Init+0x68>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <MX_GPIO_Init+0x68>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <MX_GPIO_Init+0x68>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <MX_GPIO_Init+0x68>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <Error_Handler+0x8>

080012c8 <mpu6050_read_byte>:


static uint8_t mpu6050_i2c_addr;

//single byte read sequence
mpu6050_status_t mpu6050_read_byte(I2C_HandleTypeDef *hi2c, uint8_t reg_address, uint8_t *data){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	460b      	mov	r3, r1
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, mpu6050_i2c_addr << 1, reg_address, 1, data, 1, I2C_TIMEOUT);
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <mpu6050_read_byte+0x48>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	b299      	uxth	r1, r3
 80012de:	7afb      	ldrb	r3, [r7, #11]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	2301      	movs	r3, #1
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f001 f8aa 	bl	800244c <HAL_I2C_Mem_Read>
 80012f8:	4603      	mov	r3, r0
 80012fa:	75fb      	strb	r3, [r7, #23]
	return (status == HAL_OK) ? MPU6050_OK : MPU6050_ERROR;
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf14      	ite	ne
 8001302:	2301      	movne	r3, #1
 8001304:	2300      	moveq	r3, #0
 8001306:	b2db      	uxtb	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000136 	.word	0x20000136

08001314 <mpu6050_read>:

//burst read sequence
mpu6050_status_t mpu6050_read(I2C_HandleTypeDef *hi2c, uint8_t reg_base_address, uint8_t *data, uint32_t n_bytes){
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af04      	add	r7, sp, #16
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	460b      	mov	r3, r1
 8001322:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, mpu6050_i2c_addr << 1, reg_base_address, 1, data, n_bytes, I2C_TIMEOUT);
 8001324:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <mpu6050_read+0x4c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	b299      	uxth	r1, r3
 800132c:	7afb      	ldrb	r3, [r7, #11]
 800132e:	b29a      	uxth	r2, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001338:	9002      	str	r0, [sp, #8]
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f001 f882 	bl	800244c <HAL_I2C_Mem_Read>
 8001348:	4603      	mov	r3, r0
 800134a:	75fb      	strb	r3, [r7, #23]
	return (status == HAL_OK) ? MPU6050_OK : MPU6050_ERROR;
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	2b00      	cmp	r3, #0
 8001350:	bf14      	ite	ne
 8001352:	2301      	movne	r3, #1
 8001354:	2300      	moveq	r3, #0
 8001356:	b2db      	uxtb	r3, r3
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000136 	.word	0x20000136

08001364 <mpu6050_write_byte>:


mpu6050_status_t mpu6050_write_byte(I2C_HandleTypeDef *hi2c, uint8_t reg_address, uint8_t data){
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af04      	add	r7, sp, #16
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]
 8001370:	4613      	mov	r3, r2
 8001372:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(hi2c, mpu6050_i2c_addr << 1, reg_address, 1, &data, 1, I2C_TIMEOUT);
 8001374:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <mpu6050_write_byte+0x4c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	b299      	uxth	r1, r3
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	b29a      	uxth	r2, r3
 8001380:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	2301      	movs	r3, #1
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	1cbb      	adds	r3, r7, #2
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 ff61 	bl	8002258 <HAL_I2C_Mem_Write>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
	return (status == HAL_OK) ? MPU6050_OK : MPU6050_ERROR;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b00      	cmp	r3, #0
 800139e:	bf14      	ite	ne
 80013a0:	2301      	movne	r3, #1
 80013a2:	2300      	moveq	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000136 	.word	0x20000136

080013b4 <mpu6050_init>:


mpu6050_status_t mpu6050_init(I2C_HandleTypeDef *hi2c, uint8_t i2c_address){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	70fb      	strb	r3, [r7, #3]
	mpu6050_i2c_addr = i2c_address;
 80013c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001430 <mpu6050_init+0x7c>)
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	7013      	strb	r3, [r2, #0]

	uint8_t read_byte = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73bb      	strb	r3, [r7, #14]
	if(mpu6050_read_byte(hi2c, MPU6050_REG_WHOAMI, &read_byte) != MPU6050_OK){
 80013ca:	f107 030e 	add.w	r3, r7, #14
 80013ce:	461a      	mov	r2, r3
 80013d0:	2175      	movs	r1, #117	@ 0x75
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff78 	bl	80012c8 <mpu6050_read_byte>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <mpu6050_init+0x2e>
		return MPU6050_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e022      	b.n	8001428 <mpu6050_init+0x74>
	}
	if(read_byte == 0x68 || read_byte == 0x98){
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	2b68      	cmp	r3, #104	@ 0x68
 80013e6:	d002      	beq.n	80013ee <mpu6050_init+0x3a>
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	2b98      	cmp	r3, #152	@ 0x98
 80013ec:	d111      	bne.n	8001412 <mpu6050_init+0x5e>
		printf("Valid MPU6050 at %X\n", mpu6050_i2c_addr);
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <mpu6050_init+0x7c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	480f      	ldr	r0, [pc, #60]	@ (8001434 <mpu6050_init+0x80>)
 80013f6:	f003 fb17 	bl	8004a28 <iprintf>
	}else{
		printf("Invalid device at %X\n", mpu6050_i2c_addr);
		return MPU6050_ERROR;
	}

	uint8_t data = 0x00;
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]
	if(mpu6050_write_byte(hi2c, MPU6050_REG_PWMGM_1, data) != MPU6050_OK){
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	461a      	mov	r2, r3
 8001402:	216b      	movs	r1, #107	@ 0x6b
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ffad 	bl	8001364 <mpu6050_write_byte>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d108      	bne.n	8001422 <mpu6050_init+0x6e>
 8001410:	e009      	b.n	8001426 <mpu6050_init+0x72>
		printf("Invalid device at %X\n", mpu6050_i2c_addr);
 8001412:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <mpu6050_init+0x7c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	4807      	ldr	r0, [pc, #28]	@ (8001438 <mpu6050_init+0x84>)
 800141a:	f003 fb05 	bl	8004a28 <iprintf>
		return MPU6050_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e002      	b.n	8001428 <mpu6050_init+0x74>
		return MPU6050_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <mpu6050_init+0x74>
	}
	return MPU6050_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000136 	.word	0x20000136
 8001434:	08005bf0 	.word	0x08005bf0
 8001438:	08005c08 	.word	0x08005c08

0800143c <mpu6050_read_accelerometer_data>:


mpu6050_status_t mpu6050_read_accelerometer_data(I2C_HandleTypeDef *hi2c, uint8_t i2c_dev_addr, mpu6050_accel_data_t* accel_data){
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	460b      	mov	r3, r1
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	72fb      	strb	r3, [r7, #11]
	uint8_t data[6];
	mpu6050_status_t status = mpu6050_read(hi2c, MPU6050_REG_ACCEL_START, data, sizeof(data));
 800144a:	f107 0210 	add.w	r2, r7, #16
 800144e:	2306      	movs	r3, #6
 8001450:	213b      	movs	r1, #59	@ 0x3b
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f7ff ff5e 	bl	8001314 <mpu6050_read>
 8001458:	4603      	mov	r3, r0
 800145a:	75fb      	strb	r3, [r7, #23]
	if(status != MPU6050_OK){
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <mpu6050_read_accelerometer_data+0x2a>
		return status;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	e01b      	b.n	800149e <mpu6050_read_accelerometer_data+0x62>
	}
	accel_data->x = (int16_t)((data[0] << 8) | (data[1]));
 8001466:	7c3b      	ldrb	r3, [r7, #16]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21a      	sxth	r2, r3
 800146c:	7c7b      	ldrb	r3, [r7, #17]
 800146e:	b21b      	sxth	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b21a      	sxth	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	801a      	strh	r2, [r3, #0]
	accel_data->y = (int16_t)((data[2] << 8) | (data[3]));
 8001478:	7cbb      	ldrb	r3, [r7, #18]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b21a      	sxth	r2, r3
 800147e:	7cfb      	ldrb	r3, [r7, #19]
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b21a      	sxth	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	805a      	strh	r2, [r3, #2]
	accel_data->z = (int16_t)((data[4] << 8) | (data[5]));
 800148a:	7d3b      	ldrb	r3, [r7, #20]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b21a      	sxth	r2, r3
 8001490:	7d7b      	ldrb	r3, [r7, #21]
 8001492:	b21b      	sxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b21a      	sxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	809a      	strh	r2, [r3, #4]
	return MPU6050_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <mpu6050_accel_calibration>:

mpu6050_accel_data_t mpu6050_accel_calibration(const mpu6050_accel_data_t *error_offset, mpu6050_accel_data_t *raw_data){
 80014a6:	b480      	push	{r7}
 80014a8:	b087      	sub	sp, #28
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
	mpu6050_accel_data_t accel_calibrated;
	accel_calibrated.x = raw_data->x - error_offset->x;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	823b      	strh	r3, [r7, #16]
	accel_calibrated.y = raw_data->y - error_offset->y;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21b      	sxth	r3, r3
 80014e0:	827b      	strh	r3, [r7, #18]
	accel_calibrated.z = raw_data->z - error_offset->z;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	82bb      	strh	r3, [r7, #20]

	return accel_calibrated;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	461a      	mov	r2, r3
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	6010      	str	r0, [r2, #0]
 8001506:	889b      	ldrh	r3, [r3, #4]
 8001508:	8093      	strh	r3, [r2, #4]
}
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	371c      	adds	r7, #28
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <mpu6050_configure_lpf>:

mpu6050_status_t mpu6050_configure_lpf(I2C_HandleTypeDef *hi2c, mpu6050_dlpf_config_t dlpf){
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	460b      	mov	r3, r1
 8001520:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]

	if(mpu6050_read_byte(hi2c, MPU6050_REG_CONFIG, &value) != MPU6050_OK){
 8001526:	f107 030f 	add.w	r3, r7, #15
 800152a:	461a      	mov	r2, r3
 800152c:	211a      	movs	r1, #26
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff feca 	bl	80012c8 <mpu6050_read_byte>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <mpu6050_configure_lpf+0x28>
		return MPU6050_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e015      	b.n	800156a <mpu6050_configure_lpf+0x54>
	}
	value &= ~(0x7);
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	f023 0307 	bic.w	r3, r3, #7
 8001544:	b2db      	uxtb	r3, r3
 8001546:	73fb      	strb	r3, [r7, #15]
	value |= (uint8_t)dlpf;
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	4313      	orrs	r3, r2
 800154e:	b2db      	uxtb	r3, r3
 8001550:	73fb      	strb	r3, [r7, #15]
	if(mpu6050_write_byte(hi2c, MPU6050_REG_CONFIG, value) != MPU6050_OK){
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	461a      	mov	r2, r3
 8001556:	211a      	movs	r1, #26
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff03 	bl	8001364 <mpu6050_write_byte>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <mpu6050_configure_lpf+0x52>
		return MPU6050_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <mpu6050_configure_lpf+0x54>
	}
	return MPU6050_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <HAL_MspInit+0x4c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	4a0f      	ldr	r2, [pc, #60]	@ (80015c0 <HAL_MspInit+0x4c>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001588:	6453      	str	r3, [r2, #68]	@ 0x44
 800158a:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	4a08      	ldr	r2, [pc, #32]	@ (80015c0 <HAL_MspInit+0x4c>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a29      	ldr	r2, [pc, #164]	@ (8001688 <HAL_I2C_MspInit+0xc4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d14b      	bne.n	800167e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b28      	ldr	r3, [pc, #160]	@ (800168c <HAL_I2C_MspInit+0xc8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a27      	ldr	r2, [pc, #156]	@ (800168c <HAL_I2C_MspInit+0xc8>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b25      	ldr	r3, [pc, #148]	@ (800168c <HAL_I2C_MspInit+0xc8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <HAL_I2C_MspInit+0xc8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a20      	ldr	r2, [pc, #128]	@ (800168c <HAL_I2C_MspInit+0xc8>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <HAL_I2C_MspInit+0xc8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = MPU6050_SDA_Pin;
 800161e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001624:	2312      	movs	r3, #18
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162c:	2302      	movs	r3, #2
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001630:	2304      	movs	r3, #4
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPU6050_SDA_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4815      	ldr	r0, [pc, #84]	@ (8001690 <HAL_I2C_MspInit+0xcc>)
 800163c:	f000 fb2c 	bl	8001c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MPU6050_SCL_Pin;
 8001640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001646:	2312      	movs	r3, #18
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164e:	2302      	movs	r3, #2
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001652:	2304      	movs	r3, #4
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPU6050_SCL_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	480d      	ldr	r0, [pc, #52]	@ (8001694 <HAL_I2C_MspInit+0xd0>)
 800165e:	f000 fb1b 	bl	8001c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <HAL_I2C_MspInit+0xc8>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	4a08      	ldr	r2, [pc, #32]	@ (800168c <HAL_I2C_MspInit+0xc8>)
 800166c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001670:	6413      	str	r3, [r2, #64]	@ 0x40
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_I2C_MspInit+0xc8>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	@ 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40005c00 	.word	0x40005c00
 800168c:	40023800 	.word	0x40023800
 8001690:	40020800 	.word	0x40020800
 8001694:	40020000 	.word	0x40020000

08001698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <HAL_TIM_Base_MspInit+0x48>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d115      	bne.n	80016d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <HAL_TIM_Base_MspInit+0x4c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <HAL_TIM_Base_MspInit+0x4c>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_TIM_Base_MspInit+0x4c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	201e      	movs	r0, #30
 80016cc:	f000 faad 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016d0:	201e      	movs	r0, #30
 80016d2:	f000 fac6 	bl	8001c62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40000800 	.word	0x40000800
 80016e4:	40023800 	.word	0x40023800

080016e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a12      	ldr	r2, [pc, #72]	@ (8001750 <HAL_TIM_MspPostInit+0x68>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d11e      	bne.n	8001748 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_TIM_MspPostInit+0x6c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <HAL_TIM_MspPostInit+0x6c>)
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <HAL_TIM_MspPostInit+0x6c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001726:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800172a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001738:	2302      	movs	r3, #2
 800173a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	4619      	mov	r1, r3
 8001742:	4805      	ldr	r0, [pc, #20]	@ (8001758 <HAL_TIM_MspPostInit+0x70>)
 8001744:	f000 faa8 	bl	8001c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40000800 	.word	0x40000800
 8001754:	40023800 	.word	0x40023800
 8001758:	40020c00 	.word	0x40020c00

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b2:	f000 f93f 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <TIM4_IRQHandler+0x10>)
 80017c2:	f002 fa2b 	bl	8003c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200000e0 	.word	0x200000e0

080017d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e00a      	b.n	80017f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017e2:	f3af 8000 	nop.w
 80017e6:	4601      	mov	r1, r0
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	b2ca      	uxtb	r2, r1
 80017f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf0      	blt.n	80017e2 <_read+0x12>
  }

  return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e009      	b.n	8001830 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	dbf1      	blt.n	800181c <_write+0x12>
  }
  return len;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_close>:

int _close(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800186a:	605a      	str	r2, [r3, #4]
  return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_isatty>:

int _isatty(int file)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	@ (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f003 f948 	bl	8004b70 <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	@ (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20020000 	.word	0x20020000
 800190c:	00000400 	.word	0x00000400
 8001910:	20000138 	.word	0x20000138
 8001914:	20000290 	.word	0x20000290

08001918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <SystemInit+0x20>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001922:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <SystemInit+0x20>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001974 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001940:	f7ff ffea 	bl	8001918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001946:	490d      	ldr	r1, [pc, #52]	@ (800197c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001948:	4a0d      	ldr	r2, [pc, #52]	@ (8001980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800195c:	4c0a      	ldr	r4, [pc, #40]	@ (8001988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196a:	f003 f907 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196e:	f7ff fad7 	bl	8000f20 <main>
  bx  lr    
 8001972:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001980:	08005cf8 	.word	0x08005cf8
  ldr r2, =_sbss
 8001984:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001988:	2000028c 	.word	0x2000028c

0800198c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC_IRQHandler>
	...

08001990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <HAL_Init+0x40>)
 800199a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800199e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <HAL_Init+0x40>)
 80019a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <HAL_Init+0x40>)
 80019b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 f92b 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019be:	200f      	movs	r0, #15
 80019c0:	f000 f808 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c4:	f7ff fdd6 	bl	8001574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023c00 	.word	0x40023c00

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_InitTick+0x54>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_InitTick+0x58>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f943 	bl	8001c7e <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f000 f90b 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	@ (8001a30 <HAL_InitTick+0x5c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000010 	.word	0x20000010
 8001a30:	2000000c 	.word	0x2000000c

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	@ (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000010 	.word	0x20000010
 8001a58:	2000013c 	.word	0x2000013c

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	2000013c 	.word	0x2000013c

08001a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a84:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa6:	4a04      	ldr	r2, [pc, #16]	@ (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60d3      	str	r3, [r2, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac0:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	f003 0307 	and.w	r3, r3, #7
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db0b      	blt.n	8001b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	4907      	ldr	r1, [pc, #28]	@ (8001b10 <__NVIC_EnableIRQ+0x38>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	2001      	movs	r0, #1
 8001afa:	fa00 f202 	lsl.w	r2, r0, r2
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e100 	.word	0xe000e100

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	@ (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	@ (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	@ 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	@ 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f7ff ff8e 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff29 	bl	8001a74 <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff3e 	bl	8001abc <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff8e 	bl	8001b68 <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5d 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff31 	bl	8001ad8 <__NVIC_EnableIRQ>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffa2 	bl	8001bd0 <SysTick_Config>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	@ 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e16b      	b.n	8001f8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	f040 815a 	bne.w	8001f86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d005      	beq.n	8001cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d130      	bne.n	8001d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 0201 	and.w	r2, r3, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d017      	beq.n	8001d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d123      	bne.n	8001ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	08da      	lsrs	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3208      	adds	r2, #8
 8001d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	08da      	lsrs	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3208      	adds	r2, #8
 8001dd6:	69b9      	ldr	r1, [r7, #24]
 8001dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0203 	and.w	r2, r3, #3
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80b4 	beq.w	8001f86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b60      	ldr	r3, [pc, #384]	@ (8001fa4 <HAL_GPIO_Init+0x30c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	4a5f      	ldr	r2, [pc, #380]	@ (8001fa4 <HAL_GPIO_Init+0x30c>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa4 <HAL_GPIO_Init+0x30c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8001fa8 <HAL_GPIO_Init+0x310>)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3302      	adds	r3, #2
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a52      	ldr	r2, [pc, #328]	@ (8001fac <HAL_GPIO_Init+0x314>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d02b      	beq.n	8001ebe <HAL_GPIO_Init+0x226>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a51      	ldr	r2, [pc, #324]	@ (8001fb0 <HAL_GPIO_Init+0x318>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d025      	beq.n	8001eba <HAL_GPIO_Init+0x222>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a50      	ldr	r2, [pc, #320]	@ (8001fb4 <HAL_GPIO_Init+0x31c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01f      	beq.n	8001eb6 <HAL_GPIO_Init+0x21e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4f      	ldr	r2, [pc, #316]	@ (8001fb8 <HAL_GPIO_Init+0x320>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d019      	beq.n	8001eb2 <HAL_GPIO_Init+0x21a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4e      	ldr	r2, [pc, #312]	@ (8001fbc <HAL_GPIO_Init+0x324>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0x216>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4d      	ldr	r2, [pc, #308]	@ (8001fc0 <HAL_GPIO_Init+0x328>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00d      	beq.n	8001eaa <HAL_GPIO_Init+0x212>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc4 <HAL_GPIO_Init+0x32c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <HAL_GPIO_Init+0x20e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4b      	ldr	r2, [pc, #300]	@ (8001fc8 <HAL_GPIO_Init+0x330>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_GPIO_Init+0x20a>
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	e00e      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	e00c      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001ea6:	2306      	movs	r3, #6
 8001ea8:	e00a      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001eaa:	2305      	movs	r3, #5
 8001eac:	e008      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e006      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e004      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e002      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	f002 0203 	and.w	r2, r2, #3
 8001ec6:	0092      	lsls	r2, r2, #2
 8001ec8:	4093      	lsls	r3, r2
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed0:	4935      	ldr	r1, [pc, #212]	@ (8001fa8 <HAL_GPIO_Init+0x310>)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ede:	4b3b      	ldr	r3, [pc, #236]	@ (8001fcc <HAL_GPIO_Init+0x334>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f02:	4a32      	ldr	r2, [pc, #200]	@ (8001fcc <HAL_GPIO_Init+0x334>)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f08:	4b30      	ldr	r3, [pc, #192]	@ (8001fcc <HAL_GPIO_Init+0x334>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f2c:	4a27      	ldr	r2, [pc, #156]	@ (8001fcc <HAL_GPIO_Init+0x334>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f32:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <HAL_GPIO_Init+0x334>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f56:	4a1d      	ldr	r2, [pc, #116]	@ (8001fcc <HAL_GPIO_Init+0x334>)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <HAL_GPIO_Init+0x334>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f80:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <HAL_GPIO_Init+0x334>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	2b0f      	cmp	r3, #15
 8001f90:	f67f ae90 	bls.w	8001cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3724      	adds	r7, #36	@ 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40013800 	.word	0x40013800
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	40020c00 	.word	0x40020c00
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40021400 	.word	0x40021400
 8001fc4:	40021800 	.word	0x40021800
 8001fc8:	40021c00 	.word	0x40021c00
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e12b      	b.n	800223a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fae4 	bl	80015c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2224      	movs	r2, #36	@ 0x24
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002034:	f001 fc20 	bl	8003878 <HAL_RCC_GetPCLK1Freq>
 8002038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4a81      	ldr	r2, [pc, #516]	@ (8002244 <HAL_I2C_Init+0x274>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d807      	bhi.n	8002054 <HAL_I2C_Init+0x84>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a80      	ldr	r2, [pc, #512]	@ (8002248 <HAL_I2C_Init+0x278>)
 8002048:	4293      	cmp	r3, r2
 800204a:	bf94      	ite	ls
 800204c:	2301      	movls	r3, #1
 800204e:	2300      	movhi	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	e006      	b.n	8002062 <HAL_I2C_Init+0x92>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a7d      	ldr	r2, [pc, #500]	@ (800224c <HAL_I2C_Init+0x27c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	bf94      	ite	ls
 800205c:	2301      	movls	r3, #1
 800205e:	2300      	movhi	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0e7      	b.n	800223a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4a78      	ldr	r2, [pc, #480]	@ (8002250 <HAL_I2C_Init+0x280>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0c9b      	lsrs	r3, r3, #18
 8002074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a6a      	ldr	r2, [pc, #424]	@ (8002244 <HAL_I2C_Init+0x274>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d802      	bhi.n	80020a4 <HAL_I2C_Init+0xd4>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	3301      	adds	r3, #1
 80020a2:	e009      	b.n	80020b8 <HAL_I2C_Init+0xe8>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	4a69      	ldr	r2, [pc, #420]	@ (8002254 <HAL_I2C_Init+0x284>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	099b      	lsrs	r3, r3, #6
 80020b6:	3301      	adds	r3, #1
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	430b      	orrs	r3, r1
 80020be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	495c      	ldr	r1, [pc, #368]	@ (8002244 <HAL_I2C_Init+0x274>)
 80020d4:	428b      	cmp	r3, r1
 80020d6:	d819      	bhi.n	800210c <HAL_I2C_Init+0x13c>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1e59      	subs	r1, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e6:	1c59      	adds	r1, r3, #1
 80020e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020ec:	400b      	ands	r3, r1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_I2C_Init+0x138>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1e59      	subs	r1, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002100:	3301      	adds	r3, #1
 8002102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002106:	e051      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 8002108:	2304      	movs	r3, #4
 800210a:	e04f      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d111      	bne.n	8002138 <HAL_I2C_Init+0x168>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1e58      	subs	r0, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	440b      	add	r3, r1
 8002122:	fbb0 f3f3 	udiv	r3, r0, r3
 8002126:	3301      	adds	r3, #1
 8002128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	e012      	b.n	800215e <HAL_I2C_Init+0x18e>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	0099      	lsls	r1, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Init+0x196>
 8002162:	2301      	movs	r3, #1
 8002164:	e022      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10e      	bne.n	800218c <HAL_I2C_Init+0x1bc>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1e58      	subs	r0, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6859      	ldr	r1, [r3, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	440b      	add	r3, r1
 800217c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002180:	3301      	adds	r3, #1
 8002182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800218a:	e00f      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1e58      	subs	r0, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	0099      	lsls	r1, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	6809      	ldr	r1, [r1, #0]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6911      	ldr	r1, [r2, #16]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68d2      	ldr	r2, [r2, #12]
 80021e6:	4311      	orrs	r1, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	000186a0 	.word	0x000186a0
 8002248:	001e847f 	.word	0x001e847f
 800224c:	003d08ff 	.word	0x003d08ff
 8002250:	431bde83 	.word	0x431bde83
 8002254:	10624dd3 	.word	0x10624dd3

08002258 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	4608      	mov	r0, r1
 8002262:	4611      	mov	r1, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4603      	mov	r3, r0
 8002268:	817b      	strh	r3, [r7, #10]
 800226a:	460b      	mov	r3, r1
 800226c:	813b      	strh	r3, [r7, #8]
 800226e:	4613      	mov	r3, r2
 8002270:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002272:	f7ff fbf3 	bl	8001a5c <HAL_GetTick>
 8002276:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b20      	cmp	r3, #32
 8002282:	f040 80d9 	bne.w	8002438 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2319      	movs	r3, #25
 800228c:	2201      	movs	r2, #1
 800228e:	496d      	ldr	r1, [pc, #436]	@ (8002444 <HAL_I2C_Mem_Write+0x1ec>)
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fc8b 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800229c:	2302      	movs	r3, #2
 800229e:	e0cc      	b.n	800243a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_I2C_Mem_Write+0x56>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e0c5      	b.n	800243a <HAL_I2C_Mem_Write+0x1e2>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d007      	beq.n	80022d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2221      	movs	r2, #33	@ 0x21
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2240      	movs	r2, #64	@ 0x40
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a3a      	ldr	r2, [r7, #32]
 80022fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002304:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a4d      	ldr	r2, [pc, #308]	@ (8002448 <HAL_I2C_Mem_Write+0x1f0>)
 8002314:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002316:	88f8      	ldrh	r0, [r7, #6]
 8002318:	893a      	ldrh	r2, [r7, #8]
 800231a:	8979      	ldrh	r1, [r7, #10]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	4603      	mov	r3, r0
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 fac2 	bl	80028b0 <I2C_RequestMemoryWrite>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d052      	beq.n	80023d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e081      	b.n	800243a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 fd50 	bl	8002de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00d      	beq.n	8002362 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	2b04      	cmp	r3, #4
 800234c:	d107      	bne.n	800235e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e06b      	b.n	800243a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	781a      	ldrb	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b04      	cmp	r3, #4
 800239e:	d11b      	bne.n	80023d8 <HAL_I2C_Mem_Write+0x180>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d017      	beq.n	80023d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1aa      	bne.n	8002336 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fd43 	bl	8002e70 <I2C_WaitOnBTFFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00d      	beq.n	800240c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d107      	bne.n	8002408 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002406:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e016      	b.n	800243a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800241a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e000      	b.n	800243a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002438:	2302      	movs	r3, #2
  }
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	00100002 	.word	0x00100002
 8002448:	ffff0000 	.word	0xffff0000

0800244c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	@ 0x30
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4603      	mov	r3, r0
 800245c:	817b      	strh	r3, [r7, #10]
 800245e:	460b      	mov	r3, r1
 8002460:	813b      	strh	r3, [r7, #8]
 8002462:	4613      	mov	r3, r2
 8002464:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002466:	f7ff faf9 	bl	8001a5c <HAL_GetTick>
 800246a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b20      	cmp	r3, #32
 8002476:	f040 8214 	bne.w	80028a2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2319      	movs	r3, #25
 8002480:	2201      	movs	r2, #1
 8002482:	497b      	ldr	r1, [pc, #492]	@ (8002670 <HAL_I2C_Mem_Read+0x224>)
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 fb91 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
 8002492:	e207      	b.n	80028a4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_I2C_Mem_Read+0x56>
 800249e:	2302      	movs	r3, #2
 80024a0:	e200      	b.n	80028a4 <HAL_I2C_Mem_Read+0x458>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d007      	beq.n	80024c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2222      	movs	r2, #34	@ 0x22
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2240      	movs	r2, #64	@ 0x40
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80024f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4a5b      	ldr	r2, [pc, #364]	@ (8002674 <HAL_I2C_Mem_Read+0x228>)
 8002508:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800250a:	88f8      	ldrh	r0, [r7, #6]
 800250c:	893a      	ldrh	r2, [r7, #8]
 800250e:	8979      	ldrh	r1, [r7, #10]
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	4603      	mov	r3, r0
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fa5e 	bl	80029dc <I2C_RequestMemoryRead>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e1bc      	b.n	80028a4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252e:	2b00      	cmp	r3, #0
 8002530:	d113      	bne.n	800255a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	623b      	str	r3, [r7, #32]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e190      	b.n	800287c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255e:	2b01      	cmp	r3, #1
 8002560:	d11b      	bne.n	800259a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002570:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e170      	b.n	800287c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d11b      	bne.n	80025da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	e150      	b.n	800287c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025f0:	e144      	b.n	800287c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	f200 80f1 	bhi.w	80027de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002600:	2b01      	cmp	r3, #1
 8002602:	d123      	bne.n	800264c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002606:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fc79 	bl	8002f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e145      	b.n	80028a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800264a:	e117      	b.n	800287c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002650:	2b02      	cmp	r3, #2
 8002652:	d14e      	bne.n	80026f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265a:	2200      	movs	r2, #0
 800265c:	4906      	ldr	r1, [pc, #24]	@ (8002678 <HAL_I2C_Mem_Read+0x22c>)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 faa4 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e11a      	b.n	80028a4 <HAL_I2C_Mem_Read+0x458>
 800266e:	bf00      	nop
 8002670:	00100002 	.word	0x00100002
 8002674:	ffff0000 	.word	0xffff0000
 8002678:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800268a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026f0:	e0c4      	b.n	800287c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f8:	2200      	movs	r2, #0
 80026fa:	496c      	ldr	r1, [pc, #432]	@ (80028ac <HAL_I2C_Mem_Read+0x460>)
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fa55 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0cb      	b.n	80028a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800271a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002754:	2200      	movs	r2, #0
 8002756:	4955      	ldr	r1, [pc, #340]	@ (80028ac <HAL_I2C_Mem_Read+0x460>)
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fa27 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e09d      	b.n	80028a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027dc:	e04e      	b.n	800287c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fb8c 	bl	8002f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e058      	b.n	80028a4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b04      	cmp	r3, #4
 8002830:	d124      	bne.n	800287c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002836:	2b03      	cmp	r3, #3
 8002838:	d107      	bne.n	800284a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002848:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002880:	2b00      	cmp	r3, #0
 8002882:	f47f aeb6 	bne.w	80025f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3728      	adds	r7, #40	@ 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	00010004 	.word	0x00010004

080028b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	4608      	mov	r0, r1
 80028ba:	4611      	mov	r1, r2
 80028bc:	461a      	mov	r2, r3
 80028be:	4603      	mov	r3, r0
 80028c0:	817b      	strh	r3, [r7, #10]
 80028c2:	460b      	mov	r3, r1
 80028c4:	813b      	strh	r3, [r7, #8]
 80028c6:	4613      	mov	r3, r2
 80028c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f960 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00d      	beq.n	800290e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002900:	d103      	bne.n	800290a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e05f      	b.n	80029ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800290e:	897b      	ldrh	r3, [r7, #10]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800291c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	6a3a      	ldr	r2, [r7, #32]
 8002922:	492d      	ldr	r1, [pc, #180]	@ (80029d8 <I2C_RequestMemoryWrite+0x128>)
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f9bb 	bl	8002ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e04c      	b.n	80029ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800294a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294c:	6a39      	ldr	r1, [r7, #32]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fa46 	bl	8002de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00d      	beq.n	8002976 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	2b04      	cmp	r3, #4
 8002960:	d107      	bne.n	8002972 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002970:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e02b      	b.n	80029ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d105      	bne.n	8002988 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800297c:	893b      	ldrh	r3, [r7, #8]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	611a      	str	r2, [r3, #16]
 8002986:	e021      	b.n	80029cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002988:	893b      	ldrh	r3, [r7, #8]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	b29b      	uxth	r3, r3
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002998:	6a39      	ldr	r1, [r7, #32]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fa20 	bl	8002de0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d107      	bne.n	80029be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e005      	b.n	80029ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029c2:	893b      	ldrh	r3, [r7, #8]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	00010002 	.word	0x00010002

080029dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	4608      	mov	r0, r1
 80029e6:	4611      	mov	r1, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	817b      	strh	r3, [r7, #10]
 80029ee:	460b      	mov	r3, r1
 80029f0:	813b      	strh	r3, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f8c2 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00d      	beq.n	8002a4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a3c:	d103      	bne.n	8002a46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0aa      	b.n	8002ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a4a:	897b      	ldrh	r3, [r7, #10]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	6a3a      	ldr	r2, [r7, #32]
 8002a5e:	4952      	ldr	r1, [pc, #328]	@ (8002ba8 <I2C_RequestMemoryRead+0x1cc>)
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f91d 	bl	8002ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e097      	b.n	8002ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a88:	6a39      	ldr	r1, [r7, #32]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f9a8 	bl	8002de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00d      	beq.n	8002ab2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d107      	bne.n	8002aae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e076      	b.n	8002ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab8:	893b      	ldrh	r3, [r7, #8]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	611a      	str	r2, [r3, #16]
 8002ac2:	e021      	b.n	8002b08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ac4:	893b      	ldrh	r3, [r7, #8]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad4:	6a39      	ldr	r1, [r7, #32]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f982 	bl	8002de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d107      	bne.n	8002afa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002af8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e050      	b.n	8002ba0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002afe:	893b      	ldrh	r3, [r7, #8]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0a:	6a39      	ldr	r1, [r7, #32]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f967 	bl	8002de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00d      	beq.n	8002b34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d107      	bne.n	8002b30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e035      	b.n	8002ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f82b 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b6a:	d103      	bne.n	8002b74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e013      	b.n	8002ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b78:	897b      	ldrh	r3, [r7, #10]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	6a3a      	ldr	r2, [r7, #32]
 8002b8c:	4906      	ldr	r1, [pc, #24]	@ (8002ba8 <I2C_RequestMemoryRead+0x1cc>)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f886 	bl	8002ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	00010002 	.word	0x00010002

08002bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bbc:	e048      	b.n	8002c50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d044      	beq.n	8002c50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7fe ff49 	bl	8001a5c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d139      	bne.n	8002c50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d10d      	bne.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	43da      	mvns	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	e00c      	b.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d116      	bne.n	8002c50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e023      	b.n	8002c98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d10d      	bne.n	8002c76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	43da      	mvns	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4013      	ands	r3, r2
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	e00c      	b.n	8002c90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4013      	ands	r3, r2
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d093      	beq.n	8002bbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cae:	e071      	b.n	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cbe:	d123      	bne.n	8002d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	f043 0204 	orr.w	r2, r3, #4
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e067      	b.n	8002dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0e:	d041      	beq.n	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d10:	f7fe fea4 	bl	8001a5c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d302      	bcc.n	8002d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d136      	bne.n	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	0c1b      	lsrs	r3, r3, #16
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10c      	bne.n	8002d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf14      	ite	ne
 8002d42:	2301      	movne	r3, #1
 8002d44:	2300      	moveq	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	e00b      	b.n	8002d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	43da      	mvns	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	4013      	ands	r3, r2
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf14      	ite	ne
 8002d5c:	2301      	movne	r3, #1
 8002d5e:	2300      	moveq	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d016      	beq.n	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e021      	b.n	8002dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	0c1b      	lsrs	r3, r3, #16
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d10c      	bne.n	8002db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	43da      	mvns	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4013      	ands	r3, r2
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf14      	ite	ne
 8002db0:	2301      	movne	r3, #1
 8002db2:	2300      	moveq	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e00b      	b.n	8002dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bf14      	ite	ne
 8002dca:	2301      	movne	r3, #1
 8002dcc:	2300      	moveq	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f47f af6d 	bne.w	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dec:	e034      	b.n	8002e58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f8e3 	bl	8002fba <I2C_IsAcknowledgeFailed>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e034      	b.n	8002e68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d028      	beq.n	8002e58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e06:	f7fe fe29 	bl	8001a5c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d302      	bcc.n	8002e1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d11d      	bne.n	8002e58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e26:	2b80      	cmp	r3, #128	@ 0x80
 8002e28:	d016      	beq.n	8002e58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e007      	b.n	8002e68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e62:	2b80      	cmp	r3, #128	@ 0x80
 8002e64:	d1c3      	bne.n	8002dee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e7c:	e034      	b.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f89b 	bl	8002fba <I2C_IsAcknowledgeFailed>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e034      	b.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d028      	beq.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fe fde1 	bl	8001a5c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d11d      	bne.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d016      	beq.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e007      	b.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d1c3      	bne.n	8002e7e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f0c:	e049      	b.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d119      	bne.n	8002f50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0210 	mvn.w	r2, #16
 8002f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e030      	b.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f50:	f7fe fd84 	bl	8001a5c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d302      	bcc.n	8002f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11d      	bne.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f70:	2b40      	cmp	r3, #64	@ 0x40
 8002f72:	d016      	beq.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	f043 0220 	orr.w	r2, r3, #32
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e007      	b.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fac:	2b40      	cmp	r3, #64	@ 0x40
 8002fae:	d1ae      	bne.n	8002f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd0:	d11b      	bne.n	800300a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fda:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f043 0204 	orr.w	r2, r3, #4
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e267      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d075      	beq.n	8003122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003036:	4b88      	ldr	r3, [pc, #544]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d00c      	beq.n	800305c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b85      	ldr	r3, [pc, #532]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800304a:	2b08      	cmp	r3, #8
 800304c:	d112      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304e:	4b82      	ldr	r3, [pc, #520]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800305a:	d10b      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	4b7e      	ldr	r3, [pc, #504]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d05b      	beq.n	8003120 <HAL_RCC_OscConfig+0x108>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d157      	bne.n	8003120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e242      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307c:	d106      	bne.n	800308c <HAL_RCC_OscConfig+0x74>
 800307e:	4b76      	ldr	r3, [pc, #472]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a75      	ldr	r2, [pc, #468]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e01d      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x98>
 8003096:	4b70      	ldr	r3, [pc, #448]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6f      	ldr	r2, [pc, #444]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6c      	ldr	r2, [pc, #432]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 80030b0:	4b69      	ldr	r3, [pc, #420]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a68      	ldr	r2, [pc, #416]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a65      	ldr	r2, [pc, #404]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe fcc4 	bl	8001a5c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fe fcc0 	bl	8001a5c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e207      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0xc0>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe fcb0 	bl	8001a5c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe fcac 	bl	8001a5c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	@ 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1f3      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	4b51      	ldr	r3, [pc, #324]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0xe8>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d063      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800312e:	4b4a      	ldr	r3, [pc, #296]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b47      	ldr	r3, [pc, #284]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003142:	2b08      	cmp	r3, #8
 8003144:	d11c      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b44      	ldr	r3, [pc, #272]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	4b41      	ldr	r3, [pc, #260]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e1c7      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b3b      	ldr	r3, [pc, #236]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4937      	ldr	r1, [pc, #220]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	e03a      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b34      	ldr	r3, [pc, #208]	@ (800325c <HAL_RCC_OscConfig+0x244>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fe fc65 	bl	8001a5c <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003196:	f7fe fc61 	bl	8001a5c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e1a8      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b4:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4925      	ldr	r1, [pc, #148]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ca:	4b24      	ldr	r3, [pc, #144]	@ (800325c <HAL_RCC_OscConfig+0x244>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe fc44 	bl	8001a5c <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fe fc40 	bl	8001a5c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e187      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d036      	beq.n	8003270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <HAL_RCC_OscConfig+0x248>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe fc24 	bl	8001a5c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003218:	f7fe fc20 	bl	8001a5c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e167      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x200>
 8003236:	e01b      	b.n	8003270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <HAL_RCC_OscConfig+0x248>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fe fc0d 	bl	8001a5c <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	e00e      	b.n	8003264 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003246:	f7fe fc09 	bl	8001a5c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d907      	bls.n	8003264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e150      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
 8003258:	40023800 	.word	0x40023800
 800325c:	42470000 	.word	0x42470000
 8003260:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	4b88      	ldr	r3, [pc, #544]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ea      	bne.n	8003246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8097 	beq.w	80033ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003282:	4b81      	ldr	r3, [pc, #516]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	4b7d      	ldr	r3, [pc, #500]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	4a7c      	ldr	r2, [pc, #496]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	@ 0x40
 800329e:	4b7a      	ldr	r3, [pc, #488]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b77      	ldr	r3, [pc, #476]	@ (800348c <HAL_RCC_OscConfig+0x474>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d118      	bne.n	80032ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ba:	4b74      	ldr	r3, [pc, #464]	@ (800348c <HAL_RCC_OscConfig+0x474>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a73      	ldr	r2, [pc, #460]	@ (800348c <HAL_RCC_OscConfig+0x474>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c6:	f7fe fbc9 	bl	8001a5c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fe fbc5 	bl	8001a5c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e10c      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	4b6a      	ldr	r3, [pc, #424]	@ (800348c <HAL_RCC_OscConfig+0x474>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x2ea>
 80032f4:	4b64      	ldr	r3, [pc, #400]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	4a63      	ldr	r2, [pc, #396]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003300:	e01c      	b.n	800333c <HAL_RCC_OscConfig+0x324>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b05      	cmp	r3, #5
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x30c>
 800330a:	4b5f      	ldr	r3, [pc, #380]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	4a5e      	ldr	r2, [pc, #376]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	6713      	str	r3, [r2, #112]	@ 0x70
 8003316:	4b5c      	ldr	r3, [pc, #368]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	4a5b      	ldr	r2, [pc, #364]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6713      	str	r3, [r2, #112]	@ 0x70
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0x324>
 8003324:	4b58      	ldr	r3, [pc, #352]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	4a57      	ldr	r2, [pc, #348]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003330:	4b55      	ldr	r3, [pc, #340]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003334:	4a54      	ldr	r2, [pc, #336]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003336:	f023 0304 	bic.w	r3, r3, #4
 800333a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d015      	beq.n	8003370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fe fb8a 	bl	8001a5c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fe fb86 	bl	8001a5c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0cb      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	4b49      	ldr	r3, [pc, #292]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0ee      	beq.n	800334c <HAL_RCC_OscConfig+0x334>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003370:	f7fe fb74 	bl	8001a5c <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fe fb70 	bl	8001a5c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0b5      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338e:	4b3e      	ldr	r3, [pc, #248]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ee      	bne.n	8003378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b39      	ldr	r3, [pc, #228]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	4a38      	ldr	r2, [pc, #224]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a1 	beq.w	80034f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b6:	4b34      	ldr	r3, [pc, #208]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d05c      	beq.n	800347c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d141      	bne.n	800344e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b31      	ldr	r3, [pc, #196]	@ (8003490 <HAL_RCC_OscConfig+0x478>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fe fb44 	bl	8001a5c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe fb40 	bl	8001a5c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e087      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b27      	ldr	r3, [pc, #156]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	019b      	lsls	r3, r3, #6
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	491b      	ldr	r1, [pc, #108]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003420:	4b1b      	ldr	r3, [pc, #108]	@ (8003490 <HAL_RCC_OscConfig+0x478>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fb19 	bl	8001a5c <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe fb15 	bl	8001a5c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e05c      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x416>
 800344c:	e054      	b.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <HAL_RCC_OscConfig+0x478>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fb02 	bl	8001a5c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7fe fafe 	bl	8001a5c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e045      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x444>
 800347a:	e03d      	b.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e038      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
 8003488:	40023800 	.word	0x40023800
 800348c:	40007000 	.word	0x40007000
 8003490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003494:	4b1b      	ldr	r3, [pc, #108]	@ (8003504 <HAL_RCC_OscConfig+0x4ec>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d028      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d121      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d11a      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034c4:	4013      	ands	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d111      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	3b01      	subs	r3, #1
 80034de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800

08003508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0cc      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b68      	ldr	r3, [pc, #416]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d90c      	bls.n	8003544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b65      	ldr	r3, [pc, #404]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a58      	ldr	r2, [pc, #352]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003566:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a52      	ldr	r2, [pc, #328]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800357e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d044      	beq.n	8003628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d119      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	4b3f      	ldr	r3, [pc, #252]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e06f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	4b3b      	ldr	r3, [pc, #236]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e067      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b37      	ldr	r3, [pc, #220]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4934      	ldr	r1, [pc, #208]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fe fa30 	bl	8001a5c <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fe fa2c 	bl	8001a5c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e04f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b2b      	ldr	r3, [pc, #172]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003628:	4b25      	ldr	r3, [pc, #148]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d20c      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b22      	ldr	r3, [pc, #136]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367a:	4b12      	ldr	r3, [pc, #72]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4602      	mov	r2, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	490a      	ldr	r1, [pc, #40]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	5ccb      	ldrb	r3, [r1, r3]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe f990 	bl	80019d4 <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023c00 	.word	0x40023c00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	08005c28 	.word	0x08005c28
 80036cc:	20000008 	.word	0x20000008
 80036d0:	2000000c 	.word	0x2000000c

080036d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d8:	b090      	sub	sp, #64	@ 0x40
 80036da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ec:	4b59      	ldr	r3, [pc, #356]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d00d      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	f200 80a1 	bhi.w	8003840 <HAL_RCC_GetSysClockFreq+0x16c>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x34>
 8003702:	2b04      	cmp	r3, #4
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x3a>
 8003706:	e09b      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b53      	ldr	r3, [pc, #332]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x184>)
 800370a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800370c:	e09b      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800370e:	4b53      	ldr	r3, [pc, #332]	@ (800385c <HAL_RCC_GetSysClockFreq+0x188>)
 8003710:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003712:	e098      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003714:	4b4f      	ldr	r3, [pc, #316]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x180>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800371c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800371e:	4b4d      	ldr	r3, [pc, #308]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x180>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d028      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372a:	4b4a      	ldr	r3, [pc, #296]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x180>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	2200      	movs	r2, #0
 8003732:	623b      	str	r3, [r7, #32]
 8003734:	627a      	str	r2, [r7, #36]	@ 0x24
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800373c:	2100      	movs	r1, #0
 800373e:	4b47      	ldr	r3, [pc, #284]	@ (800385c <HAL_RCC_GetSysClockFreq+0x188>)
 8003740:	fb03 f201 	mul.w	r2, r3, r1
 8003744:	2300      	movs	r3, #0
 8003746:	fb00 f303 	mul.w	r3, r0, r3
 800374a:	4413      	add	r3, r2
 800374c:	4a43      	ldr	r2, [pc, #268]	@ (800385c <HAL_RCC_GetSysClockFreq+0x188>)
 800374e:	fba0 1202 	umull	r1, r2, r0, r2
 8003752:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003754:	460a      	mov	r2, r1
 8003756:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800375a:	4413      	add	r3, r2
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800375e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003760:	2200      	movs	r2, #0
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	61fa      	str	r2, [r7, #28]
 8003766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800376a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800376e:	f7fd fa25 	bl	8000bbc <__aeabi_uldivmod>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4613      	mov	r3, r2
 8003778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800377a:	e053      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377c:	4b35      	ldr	r3, [pc, #212]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x180>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	099b      	lsrs	r3, r3, #6
 8003782:	2200      	movs	r2, #0
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	617a      	str	r2, [r7, #20]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800378e:	f04f 0b00 	mov.w	fp, #0
 8003792:	4652      	mov	r2, sl
 8003794:	465b      	mov	r3, fp
 8003796:	f04f 0000 	mov.w	r0, #0
 800379a:	f04f 0100 	mov.w	r1, #0
 800379e:	0159      	lsls	r1, r3, #5
 80037a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a4:	0150      	lsls	r0, r2, #5
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	ebb2 080a 	subs.w	r8, r2, sl
 80037ae:	eb63 090b 	sbc.w	r9, r3, fp
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037c6:	ebb2 0408 	subs.w	r4, r2, r8
 80037ca:	eb63 0509 	sbc.w	r5, r3, r9
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	00eb      	lsls	r3, r5, #3
 80037d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037dc:	00e2      	lsls	r2, r4, #3
 80037de:	4614      	mov	r4, r2
 80037e0:	461d      	mov	r5, r3
 80037e2:	eb14 030a 	adds.w	r3, r4, sl
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	eb45 030b 	adc.w	r3, r5, fp
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037fa:	4629      	mov	r1, r5
 80037fc:	028b      	lsls	r3, r1, #10
 80037fe:	4621      	mov	r1, r4
 8003800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003804:	4621      	mov	r1, r4
 8003806:	028a      	lsls	r2, r1, #10
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380e:	2200      	movs	r2, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	60fa      	str	r2, [r7, #12]
 8003814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003818:	f7fd f9d0 	bl	8000bbc <__aeabi_uldivmod>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4613      	mov	r3, r2
 8003822:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003824:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x180>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	3301      	adds	r3, #1
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003834:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800383e:	e002      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003840:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x184>)
 8003842:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003848:	4618      	mov	r0, r3
 800384a:	3740      	adds	r7, #64	@ 0x40
 800384c:	46bd      	mov	sp, r7
 800384e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	00f42400 	.word	0x00f42400
 800385c:	017d7840 	.word	0x017d7840

08003860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003864:	4b03      	ldr	r3, [pc, #12]	@ (8003874 <HAL_RCC_GetHCLKFreq+0x14>)
 8003866:	681b      	ldr	r3, [r3, #0]
}
 8003868:	4618      	mov	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000008 	.word	0x20000008

08003878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800387c:	f7ff fff0 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b05      	ldr	r3, [pc, #20]	@ (8003898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	0a9b      	lsrs	r3, r3, #10
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4903      	ldr	r1, [pc, #12]	@ (800389c <HAL_RCC_GetPCLK1Freq+0x24>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40023800 	.word	0x40023800
 800389c:	08005c38 	.word	0x08005c38

080038a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e041      	b.n	8003936 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fee6 	bl	8001698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f000 fc34 	bl	800414c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e041      	b.n	80039d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f839 	bl	80039dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	4619      	mov	r1, r3
 800397c:	4610      	mov	r0, r2
 800397e:	f000 fbe5 	bl	800414c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <HAL_TIM_PWM_Start_IT+0x28>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	bf14      	ite	ne
 8003a10:	2301      	movne	r3, #1
 8003a12:	2300      	moveq	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e022      	b.n	8003a5e <HAL_TIM_PWM_Start_IT+0x6e>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d109      	bne.n	8003a32 <HAL_TIM_PWM_Start_IT+0x42>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	bf14      	ite	ne
 8003a2a:	2301      	movne	r3, #1
 8003a2c:	2300      	moveq	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	e015      	b.n	8003a5e <HAL_TIM_PWM_Start_IT+0x6e>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d109      	bne.n	8003a4c <HAL_TIM_PWM_Start_IT+0x5c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	bf14      	ite	ne
 8003a44:	2301      	movne	r3, #1
 8003a46:	2300      	moveq	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	e008      	b.n	8003a5e <HAL_TIM_PWM_Start_IT+0x6e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	bf14      	ite	ne
 8003a58:	2301      	movne	r3, #1
 8003a5a:	2300      	moveq	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0c7      	b.n	8003bf6 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <HAL_TIM_PWM_Start_IT+0x86>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a74:	e013      	b.n	8003a9e <HAL_TIM_PWM_Start_IT+0xae>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_PWM_Start_IT+0x96>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a84:	e00b      	b.n	8003a9e <HAL_TIM_PWM_Start_IT+0xae>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d104      	bne.n	8003a96 <HAL_TIM_PWM_Start_IT+0xa6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a94:	e003      	b.n	8003a9e <HAL_TIM_PWM_Start_IT+0xae>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b0c      	cmp	r3, #12
 8003aa2:	d841      	bhi.n	8003b28 <HAL_TIM_PWM_Start_IT+0x138>
 8003aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aac <HAL_TIM_PWM_Start_IT+0xbc>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003ae1 	.word	0x08003ae1
 8003ab0:	08003b29 	.word	0x08003b29
 8003ab4:	08003b29 	.word	0x08003b29
 8003ab8:	08003b29 	.word	0x08003b29
 8003abc:	08003af3 	.word	0x08003af3
 8003ac0:	08003b29 	.word	0x08003b29
 8003ac4:	08003b29 	.word	0x08003b29
 8003ac8:	08003b29 	.word	0x08003b29
 8003acc:	08003b05 	.word	0x08003b05
 8003ad0:	08003b29 	.word	0x08003b29
 8003ad4:	08003b29 	.word	0x08003b29
 8003ad8:	08003b29 	.word	0x08003b29
 8003adc:	08003b17 	.word	0x08003b17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0202 	orr.w	r2, r2, #2
 8003aee:	60da      	str	r2, [r3, #12]
      break;
 8003af0:	e01d      	b.n	8003b2e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0204 	orr.w	r2, r2, #4
 8003b00:	60da      	str	r2, [r3, #12]
      break;
 8003b02:	e014      	b.n	8003b2e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0208 	orr.w	r2, r2, #8
 8003b12:	60da      	str	r2, [r3, #12]
      break;
 8003b14:	e00b      	b.n	8003b2e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0210 	orr.w	r2, r2, #16
 8003b24:	60da      	str	r2, [r3, #12]
      break;
 8003b26:	e002      	b.n	8003b2e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d15f      	bne.n	8003bf4 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	6839      	ldr	r1, [r7, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fdfb 	bl	8004738 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2e      	ldr	r2, [pc, #184]	@ (8003c00 <HAL_TIM_PWM_Start_IT+0x210>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_TIM_PWM_Start_IT+0x166>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2c      	ldr	r2, [pc, #176]	@ (8003c04 <HAL_TIM_PWM_Start_IT+0x214>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_TIM_PWM_Start_IT+0x16a>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_TIM_PWM_Start_IT+0x16c>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b6e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a22      	ldr	r2, [pc, #136]	@ (8003c00 <HAL_TIM_PWM_Start_IT+0x210>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d022      	beq.n	8003bc0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b82:	d01d      	beq.n	8003bc0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1f      	ldr	r2, [pc, #124]	@ (8003c08 <HAL_TIM_PWM_Start_IT+0x218>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d018      	beq.n	8003bc0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1e      	ldr	r2, [pc, #120]	@ (8003c0c <HAL_TIM_PWM_Start_IT+0x21c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c10 <HAL_TIM_PWM_Start_IT+0x220>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00e      	beq.n	8003bc0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a17      	ldr	r2, [pc, #92]	@ (8003c04 <HAL_TIM_PWM_Start_IT+0x214>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a18      	ldr	r2, [pc, #96]	@ (8003c14 <HAL_TIM_PWM_Start_IT+0x224>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d004      	beq.n	8003bc0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a17      	ldr	r2, [pc, #92]	@ (8003c18 <HAL_TIM_PWM_Start_IT+0x228>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d111      	bne.n	8003be4 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b06      	cmp	r3, #6
 8003bd0:	d010      	beq.n	8003bf4 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be2:	e007      	b.n	8003bf4 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40010000 	.word	0x40010000
 8003c04:	40010400 	.word	0x40010400
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	40000800 	.word	0x40000800
 8003c10:	40000c00 	.word	0x40000c00
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40001800 	.word	0x40001800

08003c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d020      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01b      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0202 	mvn.w	r2, #2
 8003c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa5b 	bl	8004122 <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fa4d 	bl	800410e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7fd f935 	bl	8000ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d020      	beq.n	8003ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01b      	beq.n	8003ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0204 	mvn.w	r2, #4
 8003c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fa35 	bl	8004122 <HAL_TIM_IC_CaptureCallback>
 8003cb8:	e005      	b.n	8003cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fa27 	bl	800410e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fd f90f 	bl	8000ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d020      	beq.n	8003d18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01b      	beq.n	8003d18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0208 	mvn.w	r2, #8
 8003ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2204      	movs	r2, #4
 8003cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa0f 	bl	8004122 <HAL_TIM_IC_CaptureCallback>
 8003d04:	e005      	b.n	8003d12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa01 	bl	800410e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7fd f8e9 	bl	8000ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d020      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01b      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0210 	mvn.w	r2, #16
 8003d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2208      	movs	r2, #8
 8003d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f9e9 	bl	8004122 <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f9db 	bl	800410e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7fd f8c3 	bl	8000ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0201 	mvn.w	r2, #1
 8003d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fd f892 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fd72 	bl	8004890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00c      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9b3 	bl	8004136 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00c      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0220 	mvn.w	r2, #32
 8003dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fd44 	bl	800487c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e0ae      	b.n	8003f78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b0c      	cmp	r3, #12
 8003e26:	f200 809f 	bhi.w	8003f68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e65 	.word	0x08003e65
 8003e34:	08003f69 	.word	0x08003f69
 8003e38:	08003f69 	.word	0x08003f69
 8003e3c:	08003f69 	.word	0x08003f69
 8003e40:	08003ea5 	.word	0x08003ea5
 8003e44:	08003f69 	.word	0x08003f69
 8003e48:	08003f69 	.word	0x08003f69
 8003e4c:	08003f69 	.word	0x08003f69
 8003e50:	08003ee7 	.word	0x08003ee7
 8003e54:	08003f69 	.word	0x08003f69
 8003e58:	08003f69 	.word	0x08003f69
 8003e5c:	08003f69 	.word	0x08003f69
 8003e60:	08003f27 	.word	0x08003f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fa1a 	bl	80042a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0208 	orr.w	r2, r2, #8
 8003e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0204 	bic.w	r2, r2, #4
 8003e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6999      	ldr	r1, [r3, #24]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	619a      	str	r2, [r3, #24]
      break;
 8003ea2:	e064      	b.n	8003f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fa6a 	bl	8004384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6999      	ldr	r1, [r3, #24]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	021a      	lsls	r2, r3, #8
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	619a      	str	r2, [r3, #24]
      break;
 8003ee4:	e043      	b.n	8003f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fabf 	bl	8004470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0208 	orr.w	r2, r2, #8
 8003f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0204 	bic.w	r2, r2, #4
 8003f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69d9      	ldr	r1, [r3, #28]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	61da      	str	r2, [r3, #28]
      break;
 8003f24:	e023      	b.n	8003f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fb13 	bl	8004558 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69d9      	ldr	r1, [r3, #28]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	021a      	lsls	r2, r3, #8
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	61da      	str	r2, [r3, #28]
      break;
 8003f66:	e002      	b.n	8003f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_TIM_ConfigClockSource+0x1c>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e0b4      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x186>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd4:	d03e      	beq.n	8004054 <HAL_TIM_ConfigClockSource+0xd4>
 8003fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fda:	f200 8087 	bhi.w	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 8003fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe2:	f000 8086 	beq.w	80040f2 <HAL_TIM_ConfigClockSource+0x172>
 8003fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fea:	d87f      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b70      	cmp	r3, #112	@ 0x70
 8003fee:	d01a      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0xa6>
 8003ff0:	2b70      	cmp	r3, #112	@ 0x70
 8003ff2:	d87b      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b60      	cmp	r3, #96	@ 0x60
 8003ff6:	d050      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x11a>
 8003ff8:	2b60      	cmp	r3, #96	@ 0x60
 8003ffa:	d877      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b50      	cmp	r3, #80	@ 0x50
 8003ffe:	d03c      	beq.n	800407a <HAL_TIM_ConfigClockSource+0xfa>
 8004000:	2b50      	cmp	r3, #80	@ 0x50
 8004002:	d873      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b40      	cmp	r3, #64	@ 0x40
 8004006:	d058      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x13a>
 8004008:	2b40      	cmp	r3, #64	@ 0x40
 800400a:	d86f      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b30      	cmp	r3, #48	@ 0x30
 800400e:	d064      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x15a>
 8004010:	2b30      	cmp	r3, #48	@ 0x30
 8004012:	d86b      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b20      	cmp	r3, #32
 8004016:	d060      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x15a>
 8004018:	2b20      	cmp	r3, #32
 800401a:	d867      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05c      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x15a>
 8004020:	2b10      	cmp	r3, #16
 8004022:	d05a      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x15a>
 8004024:	e062      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004036:	f000 fb5f 	bl	80046f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	609a      	str	r2, [r3, #8]
      break;
 8004052:	e04f      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004064:	f000 fb48 	bl	80046f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004076:	609a      	str	r2, [r3, #8]
      break;
 8004078:	e03c      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004086:	461a      	mov	r2, r3
 8004088:	f000 fabc 	bl	8004604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2150      	movs	r1, #80	@ 0x50
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fb15 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004098:	e02c      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040a6:	461a      	mov	r2, r3
 80040a8:	f000 fadb 	bl	8004662 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2160      	movs	r1, #96	@ 0x60
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fb05 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 80040b8:	e01c      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c6:	461a      	mov	r2, r3
 80040c8:	f000 fa9c 	bl	8004604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2140      	movs	r1, #64	@ 0x40
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 faf5 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 80040d8:	e00c      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f000 faec 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 80040ea:	e003      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
      break;
 80040f0:	e000      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004104:	7bfb      	ldrb	r3, [r7, #15]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a46      	ldr	r2, [pc, #280]	@ (8004278 <TIM_Base_SetConfig+0x12c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416a:	d00f      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a43      	ldr	r2, [pc, #268]	@ (800427c <TIM_Base_SetConfig+0x130>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00b      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a42      	ldr	r2, [pc, #264]	@ (8004280 <TIM_Base_SetConfig+0x134>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d007      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a41      	ldr	r2, [pc, #260]	@ (8004284 <TIM_Base_SetConfig+0x138>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a40      	ldr	r2, [pc, #256]	@ (8004288 <TIM_Base_SetConfig+0x13c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a35      	ldr	r2, [pc, #212]	@ (8004278 <TIM_Base_SetConfig+0x12c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d02b      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ac:	d027      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a32      	ldr	r2, [pc, #200]	@ (800427c <TIM_Base_SetConfig+0x130>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d023      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a31      	ldr	r2, [pc, #196]	@ (8004280 <TIM_Base_SetConfig+0x134>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01f      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a30      	ldr	r2, [pc, #192]	@ (8004284 <TIM_Base_SetConfig+0x138>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01b      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a2f      	ldr	r2, [pc, #188]	@ (8004288 <TIM_Base_SetConfig+0x13c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d017      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a2e      	ldr	r2, [pc, #184]	@ (800428c <TIM_Base_SetConfig+0x140>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004290 <TIM_Base_SetConfig+0x144>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00f      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004294 <TIM_Base_SetConfig+0x148>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004298 <TIM_Base_SetConfig+0x14c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a2a      	ldr	r2, [pc, #168]	@ (800429c <TIM_Base_SetConfig+0x150>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a29      	ldr	r2, [pc, #164]	@ (80042a0 <TIM_Base_SetConfig+0x154>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a10      	ldr	r2, [pc, #64]	@ (8004278 <TIM_Base_SetConfig+0x12c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0xf8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a12      	ldr	r2, [pc, #72]	@ (8004288 <TIM_Base_SetConfig+0x13c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d103      	bne.n	800424c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d105      	bne.n	800426a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f023 0201 	bic.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	611a      	str	r2, [r3, #16]
  }
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40010400 	.word	0x40010400
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800
 8004298:	40001800 	.word	0x40001800
 800429c:	40001c00 	.word	0x40001c00
 80042a0:	40002000 	.word	0x40002000

080042a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f023 0201 	bic.w	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f023 0302 	bic.w	r3, r3, #2
 80042ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a20      	ldr	r2, [pc, #128]	@ (800437c <TIM_OC1_SetConfig+0xd8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d003      	beq.n	8004308 <TIM_OC1_SetConfig+0x64>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a1f      	ldr	r2, [pc, #124]	@ (8004380 <TIM_OC1_SetConfig+0xdc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d10c      	bne.n	8004322 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 0308 	bic.w	r3, r3, #8
 800430e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f023 0304 	bic.w	r3, r3, #4
 8004320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a15      	ldr	r2, [pc, #84]	@ (800437c <TIM_OC1_SetConfig+0xd8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d003      	beq.n	8004332 <TIM_OC1_SetConfig+0x8e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a14      	ldr	r2, [pc, #80]	@ (8004380 <TIM_OC1_SetConfig+0xdc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d111      	bne.n	8004356 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	621a      	str	r2, [r3, #32]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	40010000 	.word	0x40010000
 8004380:	40010400 	.word	0x40010400

08004384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f023 0210 	bic.w	r2, r3, #16
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f023 0320 	bic.w	r3, r3, #32
 80043ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a22      	ldr	r2, [pc, #136]	@ (8004468 <TIM_OC2_SetConfig+0xe4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_OC2_SetConfig+0x68>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a21      	ldr	r2, [pc, #132]	@ (800446c <TIM_OC2_SetConfig+0xe8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d10d      	bne.n	8004408 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a17      	ldr	r2, [pc, #92]	@ (8004468 <TIM_OC2_SetConfig+0xe4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_OC2_SetConfig+0x94>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a16      	ldr	r2, [pc, #88]	@ (800446c <TIM_OC2_SetConfig+0xe8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d113      	bne.n	8004440 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800441e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40010000 	.word	0x40010000
 800446c:	40010400 	.word	0x40010400

08004470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800449e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a21      	ldr	r2, [pc, #132]	@ (8004550 <TIM_OC3_SetConfig+0xe0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_OC3_SetConfig+0x66>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a20      	ldr	r2, [pc, #128]	@ (8004554 <TIM_OC3_SetConfig+0xe4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d10d      	bne.n	80044f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a16      	ldr	r2, [pc, #88]	@ (8004550 <TIM_OC3_SetConfig+0xe0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_OC3_SetConfig+0x92>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a15      	ldr	r2, [pc, #84]	@ (8004554 <TIM_OC3_SetConfig+0xe4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d113      	bne.n	800452a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	621a      	str	r2, [r3, #32]
}
 8004544:	bf00      	nop
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40010000 	.word	0x40010000
 8004554:	40010400 	.word	0x40010400

08004558 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	031b      	lsls	r3, r3, #12
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <TIM_OC4_SetConfig+0xa4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d003      	beq.n	80045c0 <TIM_OC4_SetConfig+0x68>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a11      	ldr	r2, [pc, #68]	@ (8004600 <TIM_OC4_SetConfig+0xa8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d109      	bne.n	80045d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	019b      	lsls	r3, r3, #6
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40010000 	.word	0x40010000
 8004600:	40010400 	.word	0x40010400

08004604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800462e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 030a 	bic.w	r3, r3, #10
 8004640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004662:	b480      	push	{r7}
 8004664:	b087      	sub	sp, #28
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f023 0210 	bic.w	r2, r3, #16
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800468c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	031b      	lsls	r3, r3, #12
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800469e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b085      	sub	sp, #20
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	f043 0307 	orr.w	r3, r3, #7
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	609a      	str	r2, [r3, #8]
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	021a      	lsls	r2, r3, #8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	431a      	orrs	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4313      	orrs	r3, r2
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	2201      	movs	r2, #1
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1a      	ldr	r2, [r3, #32]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	43db      	mvns	r3, r3
 800475a:	401a      	ands	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a1a      	ldr	r2, [r3, #32]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	fa01 f303 	lsl.w	r3, r1, r3
 8004770:	431a      	orrs	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004798:	2302      	movs	r3, #2
 800479a:	e05a      	b.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a21      	ldr	r2, [pc, #132]	@ (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d022      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e8:	d01d      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d018      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1a      	ldr	r2, [pc, #104]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00e      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a18      	ldr	r2, [pc, #96]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d009      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a17      	ldr	r2, [pc, #92]	@ (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d004      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a15      	ldr	r2, [pc, #84]	@ (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d10c      	bne.n	8004840 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800482c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	4313      	orrs	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40010000 	.word	0x40010000
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800
 800486c:	40000c00 	.word	0x40000c00
 8004870:	40010400 	.word	0x40010400
 8004874:	40014000 	.word	0x40014000
 8004878:	40001800 	.word	0x40001800

0800487c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <std>:
 80048a4:	2300      	movs	r3, #0
 80048a6:	b510      	push	{r4, lr}
 80048a8:	4604      	mov	r4, r0
 80048aa:	e9c0 3300 	strd	r3, r3, [r0]
 80048ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048b2:	6083      	str	r3, [r0, #8]
 80048b4:	8181      	strh	r1, [r0, #12]
 80048b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80048b8:	81c2      	strh	r2, [r0, #14]
 80048ba:	6183      	str	r3, [r0, #24]
 80048bc:	4619      	mov	r1, r3
 80048be:	2208      	movs	r2, #8
 80048c0:	305c      	adds	r0, #92	@ 0x5c
 80048c2:	f000 f906 	bl	8004ad2 <memset>
 80048c6:	4b0d      	ldr	r3, [pc, #52]	@ (80048fc <std+0x58>)
 80048c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80048ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004900 <std+0x5c>)
 80048cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <std+0x60>)
 80048d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004908 <std+0x64>)
 80048d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80048d6:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <std+0x68>)
 80048d8:	6224      	str	r4, [r4, #32]
 80048da:	429c      	cmp	r4, r3
 80048dc:	d006      	beq.n	80048ec <std+0x48>
 80048de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048e2:	4294      	cmp	r4, r2
 80048e4:	d002      	beq.n	80048ec <std+0x48>
 80048e6:	33d0      	adds	r3, #208	@ 0xd0
 80048e8:	429c      	cmp	r4, r3
 80048ea:	d105      	bne.n	80048f8 <std+0x54>
 80048ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f4:	f000 b966 	b.w	8004bc4 <__retarget_lock_init_recursive>
 80048f8:	bd10      	pop	{r4, pc}
 80048fa:	bf00      	nop
 80048fc:	08004a4d 	.word	0x08004a4d
 8004900:	08004a6f 	.word	0x08004a6f
 8004904:	08004aa7 	.word	0x08004aa7
 8004908:	08004acb 	.word	0x08004acb
 800490c:	20000140 	.word	0x20000140

08004910 <stdio_exit_handler>:
 8004910:	4a02      	ldr	r2, [pc, #8]	@ (800491c <stdio_exit_handler+0xc>)
 8004912:	4903      	ldr	r1, [pc, #12]	@ (8004920 <stdio_exit_handler+0x10>)
 8004914:	4803      	ldr	r0, [pc, #12]	@ (8004924 <stdio_exit_handler+0x14>)
 8004916:	f000 b869 	b.w	80049ec <_fwalk_sglue>
 800491a:	bf00      	nop
 800491c:	20000014 	.word	0x20000014
 8004920:	08005465 	.word	0x08005465
 8004924:	20000024 	.word	0x20000024

08004928 <cleanup_stdio>:
 8004928:	6841      	ldr	r1, [r0, #4]
 800492a:	4b0c      	ldr	r3, [pc, #48]	@ (800495c <cleanup_stdio+0x34>)
 800492c:	4299      	cmp	r1, r3
 800492e:	b510      	push	{r4, lr}
 8004930:	4604      	mov	r4, r0
 8004932:	d001      	beq.n	8004938 <cleanup_stdio+0x10>
 8004934:	f000 fd96 	bl	8005464 <_fflush_r>
 8004938:	68a1      	ldr	r1, [r4, #8]
 800493a:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <cleanup_stdio+0x38>)
 800493c:	4299      	cmp	r1, r3
 800493e:	d002      	beq.n	8004946 <cleanup_stdio+0x1e>
 8004940:	4620      	mov	r0, r4
 8004942:	f000 fd8f 	bl	8005464 <_fflush_r>
 8004946:	68e1      	ldr	r1, [r4, #12]
 8004948:	4b06      	ldr	r3, [pc, #24]	@ (8004964 <cleanup_stdio+0x3c>)
 800494a:	4299      	cmp	r1, r3
 800494c:	d004      	beq.n	8004958 <cleanup_stdio+0x30>
 800494e:	4620      	mov	r0, r4
 8004950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004954:	f000 bd86 	b.w	8005464 <_fflush_r>
 8004958:	bd10      	pop	{r4, pc}
 800495a:	bf00      	nop
 800495c:	20000140 	.word	0x20000140
 8004960:	200001a8 	.word	0x200001a8
 8004964:	20000210 	.word	0x20000210

08004968 <global_stdio_init.part.0>:
 8004968:	b510      	push	{r4, lr}
 800496a:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <global_stdio_init.part.0+0x30>)
 800496c:	4c0b      	ldr	r4, [pc, #44]	@ (800499c <global_stdio_init.part.0+0x34>)
 800496e:	4a0c      	ldr	r2, [pc, #48]	@ (80049a0 <global_stdio_init.part.0+0x38>)
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	4620      	mov	r0, r4
 8004974:	2200      	movs	r2, #0
 8004976:	2104      	movs	r1, #4
 8004978:	f7ff ff94 	bl	80048a4 <std>
 800497c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004980:	2201      	movs	r2, #1
 8004982:	2109      	movs	r1, #9
 8004984:	f7ff ff8e 	bl	80048a4 <std>
 8004988:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800498c:	2202      	movs	r2, #2
 800498e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004992:	2112      	movs	r1, #18
 8004994:	f7ff bf86 	b.w	80048a4 <std>
 8004998:	20000278 	.word	0x20000278
 800499c:	20000140 	.word	0x20000140
 80049a0:	08004911 	.word	0x08004911

080049a4 <__sfp_lock_acquire>:
 80049a4:	4801      	ldr	r0, [pc, #4]	@ (80049ac <__sfp_lock_acquire+0x8>)
 80049a6:	f000 b90e 	b.w	8004bc6 <__retarget_lock_acquire_recursive>
 80049aa:	bf00      	nop
 80049ac:	20000281 	.word	0x20000281

080049b0 <__sfp_lock_release>:
 80049b0:	4801      	ldr	r0, [pc, #4]	@ (80049b8 <__sfp_lock_release+0x8>)
 80049b2:	f000 b909 	b.w	8004bc8 <__retarget_lock_release_recursive>
 80049b6:	bf00      	nop
 80049b8:	20000281 	.word	0x20000281

080049bc <__sinit>:
 80049bc:	b510      	push	{r4, lr}
 80049be:	4604      	mov	r4, r0
 80049c0:	f7ff fff0 	bl	80049a4 <__sfp_lock_acquire>
 80049c4:	6a23      	ldr	r3, [r4, #32]
 80049c6:	b11b      	cbz	r3, 80049d0 <__sinit+0x14>
 80049c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049cc:	f7ff bff0 	b.w	80049b0 <__sfp_lock_release>
 80049d0:	4b04      	ldr	r3, [pc, #16]	@ (80049e4 <__sinit+0x28>)
 80049d2:	6223      	str	r3, [r4, #32]
 80049d4:	4b04      	ldr	r3, [pc, #16]	@ (80049e8 <__sinit+0x2c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f5      	bne.n	80049c8 <__sinit+0xc>
 80049dc:	f7ff ffc4 	bl	8004968 <global_stdio_init.part.0>
 80049e0:	e7f2      	b.n	80049c8 <__sinit+0xc>
 80049e2:	bf00      	nop
 80049e4:	08004929 	.word	0x08004929
 80049e8:	20000278 	.word	0x20000278

080049ec <_fwalk_sglue>:
 80049ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f0:	4607      	mov	r7, r0
 80049f2:	4688      	mov	r8, r1
 80049f4:	4614      	mov	r4, r2
 80049f6:	2600      	movs	r6, #0
 80049f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004a00:	d505      	bpl.n	8004a0e <_fwalk_sglue+0x22>
 8004a02:	6824      	ldr	r4, [r4, #0]
 8004a04:	2c00      	cmp	r4, #0
 8004a06:	d1f7      	bne.n	80049f8 <_fwalk_sglue+0xc>
 8004a08:	4630      	mov	r0, r6
 8004a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a0e:	89ab      	ldrh	r3, [r5, #12]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d907      	bls.n	8004a24 <_fwalk_sglue+0x38>
 8004a14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	d003      	beq.n	8004a24 <_fwalk_sglue+0x38>
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4638      	mov	r0, r7
 8004a20:	47c0      	blx	r8
 8004a22:	4306      	orrs	r6, r0
 8004a24:	3568      	adds	r5, #104	@ 0x68
 8004a26:	e7e9      	b.n	80049fc <_fwalk_sglue+0x10>

08004a28 <iprintf>:
 8004a28:	b40f      	push	{r0, r1, r2, r3}
 8004a2a:	b507      	push	{r0, r1, r2, lr}
 8004a2c:	4906      	ldr	r1, [pc, #24]	@ (8004a48 <iprintf+0x20>)
 8004a2e:	ab04      	add	r3, sp, #16
 8004a30:	6808      	ldr	r0, [r1, #0]
 8004a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a36:	6881      	ldr	r1, [r0, #8]
 8004a38:	9301      	str	r3, [sp, #4]
 8004a3a:	f000 f9e9 	bl	8004e10 <_vfiprintf_r>
 8004a3e:	b003      	add	sp, #12
 8004a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a44:	b004      	add	sp, #16
 8004a46:	4770      	bx	lr
 8004a48:	20000020 	.word	0x20000020

08004a4c <__sread>:
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	460c      	mov	r4, r1
 8004a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a54:	f000 f868 	bl	8004b28 <_read_r>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	bfab      	itete	ge
 8004a5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a60:	181b      	addge	r3, r3, r0
 8004a62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a66:	bfac      	ite	ge
 8004a68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a6a:	81a3      	strhlt	r3, [r4, #12]
 8004a6c:	bd10      	pop	{r4, pc}

08004a6e <__swrite>:
 8004a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a72:	461f      	mov	r7, r3
 8004a74:	898b      	ldrh	r3, [r1, #12]
 8004a76:	05db      	lsls	r3, r3, #23
 8004a78:	4605      	mov	r5, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4616      	mov	r6, r2
 8004a7e:	d505      	bpl.n	8004a8c <__swrite+0x1e>
 8004a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a84:	2302      	movs	r3, #2
 8004a86:	2200      	movs	r2, #0
 8004a88:	f000 f83c 	bl	8004b04 <_lseek_r>
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a96:	81a3      	strh	r3, [r4, #12]
 8004a98:	4632      	mov	r2, r6
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa2:	f000 b853 	b.w	8004b4c <_write_r>

08004aa6 <__sseek>:
 8004aa6:	b510      	push	{r4, lr}
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aae:	f000 f829 	bl	8004b04 <_lseek_r>
 8004ab2:	1c43      	adds	r3, r0, #1
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	bf15      	itete	ne
 8004ab8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004aba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004abe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ac2:	81a3      	strheq	r3, [r4, #12]
 8004ac4:	bf18      	it	ne
 8004ac6:	81a3      	strhne	r3, [r4, #12]
 8004ac8:	bd10      	pop	{r4, pc}

08004aca <__sclose>:
 8004aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ace:	f000 b809 	b.w	8004ae4 <_close_r>

08004ad2 <memset>:
 8004ad2:	4402      	add	r2, r0
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d100      	bne.n	8004adc <memset+0xa>
 8004ada:	4770      	bx	lr
 8004adc:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae0:	e7f9      	b.n	8004ad6 <memset+0x4>
	...

08004ae4 <_close_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4d06      	ldr	r5, [pc, #24]	@ (8004b00 <_close_r+0x1c>)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4604      	mov	r4, r0
 8004aec:	4608      	mov	r0, r1
 8004aee:	602b      	str	r3, [r5, #0]
 8004af0:	f7fc fea7 	bl	8001842 <_close>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d102      	bne.n	8004afe <_close_r+0x1a>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	b103      	cbz	r3, 8004afe <_close_r+0x1a>
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
 8004b00:	2000027c 	.word	0x2000027c

08004b04 <_lseek_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	4d07      	ldr	r5, [pc, #28]	@ (8004b24 <_lseek_r+0x20>)
 8004b08:	4604      	mov	r4, r0
 8004b0a:	4608      	mov	r0, r1
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	2200      	movs	r2, #0
 8004b10:	602a      	str	r2, [r5, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f7fc febc 	bl	8001890 <_lseek>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d102      	bne.n	8004b22 <_lseek_r+0x1e>
 8004b1c:	682b      	ldr	r3, [r5, #0]
 8004b1e:	b103      	cbz	r3, 8004b22 <_lseek_r+0x1e>
 8004b20:	6023      	str	r3, [r4, #0]
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	2000027c 	.word	0x2000027c

08004b28 <_read_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4d07      	ldr	r5, [pc, #28]	@ (8004b48 <_read_r+0x20>)
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	4608      	mov	r0, r1
 8004b30:	4611      	mov	r1, r2
 8004b32:	2200      	movs	r2, #0
 8004b34:	602a      	str	r2, [r5, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f7fc fe4a 	bl	80017d0 <_read>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d102      	bne.n	8004b46 <_read_r+0x1e>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	b103      	cbz	r3, 8004b46 <_read_r+0x1e>
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	2000027c 	.word	0x2000027c

08004b4c <_write_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	4d07      	ldr	r5, [pc, #28]	@ (8004b6c <_write_r+0x20>)
 8004b50:	4604      	mov	r4, r0
 8004b52:	4608      	mov	r0, r1
 8004b54:	4611      	mov	r1, r2
 8004b56:	2200      	movs	r2, #0
 8004b58:	602a      	str	r2, [r5, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f7fc fe55 	bl	800180a <_write>
 8004b60:	1c43      	adds	r3, r0, #1
 8004b62:	d102      	bne.n	8004b6a <_write_r+0x1e>
 8004b64:	682b      	ldr	r3, [r5, #0]
 8004b66:	b103      	cbz	r3, 8004b6a <_write_r+0x1e>
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	bd38      	pop	{r3, r4, r5, pc}
 8004b6c:	2000027c 	.word	0x2000027c

08004b70 <__errno>:
 8004b70:	4b01      	ldr	r3, [pc, #4]	@ (8004b78 <__errno+0x8>)
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000020 	.word	0x20000020

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	4d0d      	ldr	r5, [pc, #52]	@ (8004bb4 <__libc_init_array+0x38>)
 8004b80:	4c0d      	ldr	r4, [pc, #52]	@ (8004bb8 <__libc_init_array+0x3c>)
 8004b82:	1b64      	subs	r4, r4, r5
 8004b84:	10a4      	asrs	r4, r4, #2
 8004b86:	2600      	movs	r6, #0
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	4d0b      	ldr	r5, [pc, #44]	@ (8004bbc <__libc_init_array+0x40>)
 8004b8e:	4c0c      	ldr	r4, [pc, #48]	@ (8004bc0 <__libc_init_array+0x44>)
 8004b90:	f001 f822 	bl	8005bd8 <_init>
 8004b94:	1b64      	subs	r4, r4, r5
 8004b96:	10a4      	asrs	r4, r4, #2
 8004b98:	2600      	movs	r6, #0
 8004b9a:	42a6      	cmp	r6, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba4:	4798      	blx	r3
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bae:	4798      	blx	r3
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	08005cf0 	.word	0x08005cf0
 8004bb8:	08005cf0 	.word	0x08005cf0
 8004bbc:	08005cf0 	.word	0x08005cf0
 8004bc0:	08005cf4 	.word	0x08005cf4

08004bc4 <__retarget_lock_init_recursive>:
 8004bc4:	4770      	bx	lr

08004bc6 <__retarget_lock_acquire_recursive>:
 8004bc6:	4770      	bx	lr

08004bc8 <__retarget_lock_release_recursive>:
 8004bc8:	4770      	bx	lr
	...

08004bcc <_free_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4605      	mov	r5, r0
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	d041      	beq.n	8004c58 <_free_r+0x8c>
 8004bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd8:	1f0c      	subs	r4, r1, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bfb8      	it	lt
 8004bde:	18e4      	addlt	r4, r4, r3
 8004be0:	f000 f8e0 	bl	8004da4 <__malloc_lock>
 8004be4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c5c <_free_r+0x90>)
 8004be6:	6813      	ldr	r3, [r2, #0]
 8004be8:	b933      	cbnz	r3, 8004bf8 <_free_r+0x2c>
 8004bea:	6063      	str	r3, [r4, #4]
 8004bec:	6014      	str	r4, [r2, #0]
 8004bee:	4628      	mov	r0, r5
 8004bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bf4:	f000 b8dc 	b.w	8004db0 <__malloc_unlock>
 8004bf8:	42a3      	cmp	r3, r4
 8004bfa:	d908      	bls.n	8004c0e <_free_r+0x42>
 8004bfc:	6820      	ldr	r0, [r4, #0]
 8004bfe:	1821      	adds	r1, r4, r0
 8004c00:	428b      	cmp	r3, r1
 8004c02:	bf01      	itttt	eq
 8004c04:	6819      	ldreq	r1, [r3, #0]
 8004c06:	685b      	ldreq	r3, [r3, #4]
 8004c08:	1809      	addeq	r1, r1, r0
 8004c0a:	6021      	streq	r1, [r4, #0]
 8004c0c:	e7ed      	b.n	8004bea <_free_r+0x1e>
 8004c0e:	461a      	mov	r2, r3
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	b10b      	cbz	r3, 8004c18 <_free_r+0x4c>
 8004c14:	42a3      	cmp	r3, r4
 8004c16:	d9fa      	bls.n	8004c0e <_free_r+0x42>
 8004c18:	6811      	ldr	r1, [r2, #0]
 8004c1a:	1850      	adds	r0, r2, r1
 8004c1c:	42a0      	cmp	r0, r4
 8004c1e:	d10b      	bne.n	8004c38 <_free_r+0x6c>
 8004c20:	6820      	ldr	r0, [r4, #0]
 8004c22:	4401      	add	r1, r0
 8004c24:	1850      	adds	r0, r2, r1
 8004c26:	4283      	cmp	r3, r0
 8004c28:	6011      	str	r1, [r2, #0]
 8004c2a:	d1e0      	bne.n	8004bee <_free_r+0x22>
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	6053      	str	r3, [r2, #4]
 8004c32:	4408      	add	r0, r1
 8004c34:	6010      	str	r0, [r2, #0]
 8004c36:	e7da      	b.n	8004bee <_free_r+0x22>
 8004c38:	d902      	bls.n	8004c40 <_free_r+0x74>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	602b      	str	r3, [r5, #0]
 8004c3e:	e7d6      	b.n	8004bee <_free_r+0x22>
 8004c40:	6820      	ldr	r0, [r4, #0]
 8004c42:	1821      	adds	r1, r4, r0
 8004c44:	428b      	cmp	r3, r1
 8004c46:	bf04      	itt	eq
 8004c48:	6819      	ldreq	r1, [r3, #0]
 8004c4a:	685b      	ldreq	r3, [r3, #4]
 8004c4c:	6063      	str	r3, [r4, #4]
 8004c4e:	bf04      	itt	eq
 8004c50:	1809      	addeq	r1, r1, r0
 8004c52:	6021      	streq	r1, [r4, #0]
 8004c54:	6054      	str	r4, [r2, #4]
 8004c56:	e7ca      	b.n	8004bee <_free_r+0x22>
 8004c58:	bd38      	pop	{r3, r4, r5, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000288 	.word	0x20000288

08004c60 <sbrk_aligned>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	4e0f      	ldr	r6, [pc, #60]	@ (8004ca0 <sbrk_aligned+0x40>)
 8004c64:	460c      	mov	r4, r1
 8004c66:	6831      	ldr	r1, [r6, #0]
 8004c68:	4605      	mov	r5, r0
 8004c6a:	b911      	cbnz	r1, 8004c72 <sbrk_aligned+0x12>
 8004c6c:	f000 fcb6 	bl	80055dc <_sbrk_r>
 8004c70:	6030      	str	r0, [r6, #0]
 8004c72:	4621      	mov	r1, r4
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 fcb1 	bl	80055dc <_sbrk_r>
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	d103      	bne.n	8004c86 <sbrk_aligned+0x26>
 8004c7e:	f04f 34ff 	mov.w	r4, #4294967295
 8004c82:	4620      	mov	r0, r4
 8004c84:	bd70      	pop	{r4, r5, r6, pc}
 8004c86:	1cc4      	adds	r4, r0, #3
 8004c88:	f024 0403 	bic.w	r4, r4, #3
 8004c8c:	42a0      	cmp	r0, r4
 8004c8e:	d0f8      	beq.n	8004c82 <sbrk_aligned+0x22>
 8004c90:	1a21      	subs	r1, r4, r0
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 fca2 	bl	80055dc <_sbrk_r>
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d1f2      	bne.n	8004c82 <sbrk_aligned+0x22>
 8004c9c:	e7ef      	b.n	8004c7e <sbrk_aligned+0x1e>
 8004c9e:	bf00      	nop
 8004ca0:	20000284 	.word	0x20000284

08004ca4 <_malloc_r>:
 8004ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ca8:	1ccd      	adds	r5, r1, #3
 8004caa:	f025 0503 	bic.w	r5, r5, #3
 8004cae:	3508      	adds	r5, #8
 8004cb0:	2d0c      	cmp	r5, #12
 8004cb2:	bf38      	it	cc
 8004cb4:	250c      	movcc	r5, #12
 8004cb6:	2d00      	cmp	r5, #0
 8004cb8:	4606      	mov	r6, r0
 8004cba:	db01      	blt.n	8004cc0 <_malloc_r+0x1c>
 8004cbc:	42a9      	cmp	r1, r5
 8004cbe:	d904      	bls.n	8004cca <_malloc_r+0x26>
 8004cc0:	230c      	movs	r3, #12
 8004cc2:	6033      	str	r3, [r6, #0]
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004da0 <_malloc_r+0xfc>
 8004cce:	f000 f869 	bl	8004da4 <__malloc_lock>
 8004cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8004cd6:	461c      	mov	r4, r3
 8004cd8:	bb44      	cbnz	r4, 8004d2c <_malloc_r+0x88>
 8004cda:	4629      	mov	r1, r5
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f7ff ffbf 	bl	8004c60 <sbrk_aligned>
 8004ce2:	1c43      	adds	r3, r0, #1
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	d158      	bne.n	8004d9a <_malloc_r+0xf6>
 8004ce8:	f8d8 4000 	ldr.w	r4, [r8]
 8004cec:	4627      	mov	r7, r4
 8004cee:	2f00      	cmp	r7, #0
 8004cf0:	d143      	bne.n	8004d7a <_malloc_r+0xd6>
 8004cf2:	2c00      	cmp	r4, #0
 8004cf4:	d04b      	beq.n	8004d8e <_malloc_r+0xea>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	4639      	mov	r1, r7
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	eb04 0903 	add.w	r9, r4, r3
 8004d00:	f000 fc6c 	bl	80055dc <_sbrk_r>
 8004d04:	4581      	cmp	r9, r0
 8004d06:	d142      	bne.n	8004d8e <_malloc_r+0xea>
 8004d08:	6821      	ldr	r1, [r4, #0]
 8004d0a:	1a6d      	subs	r5, r5, r1
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f7ff ffa6 	bl	8004c60 <sbrk_aligned>
 8004d14:	3001      	adds	r0, #1
 8004d16:	d03a      	beq.n	8004d8e <_malloc_r+0xea>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	442b      	add	r3, r5
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	bb62      	cbnz	r2, 8004d80 <_malloc_r+0xdc>
 8004d26:	f8c8 7000 	str.w	r7, [r8]
 8004d2a:	e00f      	b.n	8004d4c <_malloc_r+0xa8>
 8004d2c:	6822      	ldr	r2, [r4, #0]
 8004d2e:	1b52      	subs	r2, r2, r5
 8004d30:	d420      	bmi.n	8004d74 <_malloc_r+0xd0>
 8004d32:	2a0b      	cmp	r2, #11
 8004d34:	d917      	bls.n	8004d66 <_malloc_r+0xc2>
 8004d36:	1961      	adds	r1, r4, r5
 8004d38:	42a3      	cmp	r3, r4
 8004d3a:	6025      	str	r5, [r4, #0]
 8004d3c:	bf18      	it	ne
 8004d3e:	6059      	strne	r1, [r3, #4]
 8004d40:	6863      	ldr	r3, [r4, #4]
 8004d42:	bf08      	it	eq
 8004d44:	f8c8 1000 	streq.w	r1, [r8]
 8004d48:	5162      	str	r2, [r4, r5]
 8004d4a:	604b      	str	r3, [r1, #4]
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	f000 f82f 	bl	8004db0 <__malloc_unlock>
 8004d52:	f104 000b 	add.w	r0, r4, #11
 8004d56:	1d23      	adds	r3, r4, #4
 8004d58:	f020 0007 	bic.w	r0, r0, #7
 8004d5c:	1ac2      	subs	r2, r0, r3
 8004d5e:	bf1c      	itt	ne
 8004d60:	1a1b      	subne	r3, r3, r0
 8004d62:	50a3      	strne	r3, [r4, r2]
 8004d64:	e7af      	b.n	8004cc6 <_malloc_r+0x22>
 8004d66:	6862      	ldr	r2, [r4, #4]
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	bf0c      	ite	eq
 8004d6c:	f8c8 2000 	streq.w	r2, [r8]
 8004d70:	605a      	strne	r2, [r3, #4]
 8004d72:	e7eb      	b.n	8004d4c <_malloc_r+0xa8>
 8004d74:	4623      	mov	r3, r4
 8004d76:	6864      	ldr	r4, [r4, #4]
 8004d78:	e7ae      	b.n	8004cd8 <_malloc_r+0x34>
 8004d7a:	463c      	mov	r4, r7
 8004d7c:	687f      	ldr	r7, [r7, #4]
 8004d7e:	e7b6      	b.n	8004cee <_malloc_r+0x4a>
 8004d80:	461a      	mov	r2, r3
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	42a3      	cmp	r3, r4
 8004d86:	d1fb      	bne.n	8004d80 <_malloc_r+0xdc>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6053      	str	r3, [r2, #4]
 8004d8c:	e7de      	b.n	8004d4c <_malloc_r+0xa8>
 8004d8e:	230c      	movs	r3, #12
 8004d90:	6033      	str	r3, [r6, #0]
 8004d92:	4630      	mov	r0, r6
 8004d94:	f000 f80c 	bl	8004db0 <__malloc_unlock>
 8004d98:	e794      	b.n	8004cc4 <_malloc_r+0x20>
 8004d9a:	6005      	str	r5, [r0, #0]
 8004d9c:	e7d6      	b.n	8004d4c <_malloc_r+0xa8>
 8004d9e:	bf00      	nop
 8004da0:	20000288 	.word	0x20000288

08004da4 <__malloc_lock>:
 8004da4:	4801      	ldr	r0, [pc, #4]	@ (8004dac <__malloc_lock+0x8>)
 8004da6:	f7ff bf0e 	b.w	8004bc6 <__retarget_lock_acquire_recursive>
 8004daa:	bf00      	nop
 8004dac:	20000280 	.word	0x20000280

08004db0 <__malloc_unlock>:
 8004db0:	4801      	ldr	r0, [pc, #4]	@ (8004db8 <__malloc_unlock+0x8>)
 8004db2:	f7ff bf09 	b.w	8004bc8 <__retarget_lock_release_recursive>
 8004db6:	bf00      	nop
 8004db8:	20000280 	.word	0x20000280

08004dbc <__sfputc_r>:
 8004dbc:	6893      	ldr	r3, [r2, #8]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	b410      	push	{r4}
 8004dc4:	6093      	str	r3, [r2, #8]
 8004dc6:	da08      	bge.n	8004dda <__sfputc_r+0x1e>
 8004dc8:	6994      	ldr	r4, [r2, #24]
 8004dca:	42a3      	cmp	r3, r4
 8004dcc:	db01      	blt.n	8004dd2 <__sfputc_r+0x16>
 8004dce:	290a      	cmp	r1, #10
 8004dd0:	d103      	bne.n	8004dda <__sfputc_r+0x1e>
 8004dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dd6:	f000 bb6d 	b.w	80054b4 <__swbuf_r>
 8004dda:	6813      	ldr	r3, [r2, #0]
 8004ddc:	1c58      	adds	r0, r3, #1
 8004dde:	6010      	str	r0, [r2, #0]
 8004de0:	7019      	strb	r1, [r3, #0]
 8004de2:	4608      	mov	r0, r1
 8004de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <__sfputs_r>:
 8004dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dec:	4606      	mov	r6, r0
 8004dee:	460f      	mov	r7, r1
 8004df0:	4614      	mov	r4, r2
 8004df2:	18d5      	adds	r5, r2, r3
 8004df4:	42ac      	cmp	r4, r5
 8004df6:	d101      	bne.n	8004dfc <__sfputs_r+0x12>
 8004df8:	2000      	movs	r0, #0
 8004dfa:	e007      	b.n	8004e0c <__sfputs_r+0x22>
 8004dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e00:	463a      	mov	r2, r7
 8004e02:	4630      	mov	r0, r6
 8004e04:	f7ff ffda 	bl	8004dbc <__sfputc_r>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d1f3      	bne.n	8004df4 <__sfputs_r+0xa>
 8004e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e10 <_vfiprintf_r>:
 8004e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e14:	460d      	mov	r5, r1
 8004e16:	b09d      	sub	sp, #116	@ 0x74
 8004e18:	4614      	mov	r4, r2
 8004e1a:	4698      	mov	r8, r3
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	b118      	cbz	r0, 8004e28 <_vfiprintf_r+0x18>
 8004e20:	6a03      	ldr	r3, [r0, #32]
 8004e22:	b90b      	cbnz	r3, 8004e28 <_vfiprintf_r+0x18>
 8004e24:	f7ff fdca 	bl	80049bc <__sinit>
 8004e28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e2a:	07d9      	lsls	r1, r3, #31
 8004e2c:	d405      	bmi.n	8004e3a <_vfiprintf_r+0x2a>
 8004e2e:	89ab      	ldrh	r3, [r5, #12]
 8004e30:	059a      	lsls	r2, r3, #22
 8004e32:	d402      	bmi.n	8004e3a <_vfiprintf_r+0x2a>
 8004e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e36:	f7ff fec6 	bl	8004bc6 <__retarget_lock_acquire_recursive>
 8004e3a:	89ab      	ldrh	r3, [r5, #12]
 8004e3c:	071b      	lsls	r3, r3, #28
 8004e3e:	d501      	bpl.n	8004e44 <_vfiprintf_r+0x34>
 8004e40:	692b      	ldr	r3, [r5, #16]
 8004e42:	b99b      	cbnz	r3, 8004e6c <_vfiprintf_r+0x5c>
 8004e44:	4629      	mov	r1, r5
 8004e46:	4630      	mov	r0, r6
 8004e48:	f000 fb72 	bl	8005530 <__swsetup_r>
 8004e4c:	b170      	cbz	r0, 8004e6c <_vfiprintf_r+0x5c>
 8004e4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e50:	07dc      	lsls	r4, r3, #31
 8004e52:	d504      	bpl.n	8004e5e <_vfiprintf_r+0x4e>
 8004e54:	f04f 30ff 	mov.w	r0, #4294967295
 8004e58:	b01d      	add	sp, #116	@ 0x74
 8004e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5e:	89ab      	ldrh	r3, [r5, #12]
 8004e60:	0598      	lsls	r0, r3, #22
 8004e62:	d4f7      	bmi.n	8004e54 <_vfiprintf_r+0x44>
 8004e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e66:	f7ff feaf 	bl	8004bc8 <__retarget_lock_release_recursive>
 8004e6a:	e7f3      	b.n	8004e54 <_vfiprintf_r+0x44>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e70:	2320      	movs	r3, #32
 8004e72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e7a:	2330      	movs	r3, #48	@ 0x30
 8004e7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800502c <_vfiprintf_r+0x21c>
 8004e80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e84:	f04f 0901 	mov.w	r9, #1
 8004e88:	4623      	mov	r3, r4
 8004e8a:	469a      	mov	sl, r3
 8004e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e90:	b10a      	cbz	r2, 8004e96 <_vfiprintf_r+0x86>
 8004e92:	2a25      	cmp	r2, #37	@ 0x25
 8004e94:	d1f9      	bne.n	8004e8a <_vfiprintf_r+0x7a>
 8004e96:	ebba 0b04 	subs.w	fp, sl, r4
 8004e9a:	d00b      	beq.n	8004eb4 <_vfiprintf_r+0xa4>
 8004e9c:	465b      	mov	r3, fp
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f7ff ffa1 	bl	8004dea <__sfputs_r>
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f000 80a7 	beq.w	8004ffc <_vfiprintf_r+0x1ec>
 8004eae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004eb0:	445a      	add	r2, fp
 8004eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 809f 	beq.w	8004ffc <_vfiprintf_r+0x1ec>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ec8:	f10a 0a01 	add.w	sl, sl, #1
 8004ecc:	9304      	str	r3, [sp, #16]
 8004ece:	9307      	str	r3, [sp, #28]
 8004ed0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ed4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ed6:	4654      	mov	r4, sl
 8004ed8:	2205      	movs	r2, #5
 8004eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ede:	4853      	ldr	r0, [pc, #332]	@ (800502c <_vfiprintf_r+0x21c>)
 8004ee0:	f7fb f976 	bl	80001d0 <memchr>
 8004ee4:	9a04      	ldr	r2, [sp, #16]
 8004ee6:	b9d8      	cbnz	r0, 8004f20 <_vfiprintf_r+0x110>
 8004ee8:	06d1      	lsls	r1, r2, #27
 8004eea:	bf44      	itt	mi
 8004eec:	2320      	movmi	r3, #32
 8004eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ef2:	0713      	lsls	r3, r2, #28
 8004ef4:	bf44      	itt	mi
 8004ef6:	232b      	movmi	r3, #43	@ 0x2b
 8004ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004efc:	f89a 3000 	ldrb.w	r3, [sl]
 8004f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f02:	d015      	beq.n	8004f30 <_vfiprintf_r+0x120>
 8004f04:	9a07      	ldr	r2, [sp, #28]
 8004f06:	4654      	mov	r4, sl
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f04f 0c0a 	mov.w	ip, #10
 8004f0e:	4621      	mov	r1, r4
 8004f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f14:	3b30      	subs	r3, #48	@ 0x30
 8004f16:	2b09      	cmp	r3, #9
 8004f18:	d94b      	bls.n	8004fb2 <_vfiprintf_r+0x1a2>
 8004f1a:	b1b0      	cbz	r0, 8004f4a <_vfiprintf_r+0x13a>
 8004f1c:	9207      	str	r2, [sp, #28]
 8004f1e:	e014      	b.n	8004f4a <_vfiprintf_r+0x13a>
 8004f20:	eba0 0308 	sub.w	r3, r0, r8
 8004f24:	fa09 f303 	lsl.w	r3, r9, r3
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	9304      	str	r3, [sp, #16]
 8004f2c:	46a2      	mov	sl, r4
 8004f2e:	e7d2      	b.n	8004ed6 <_vfiprintf_r+0xc6>
 8004f30:	9b03      	ldr	r3, [sp, #12]
 8004f32:	1d19      	adds	r1, r3, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	9103      	str	r1, [sp, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bfbb      	ittet	lt
 8004f3c:	425b      	neglt	r3, r3
 8004f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8004f42:	9307      	strge	r3, [sp, #28]
 8004f44:	9307      	strlt	r3, [sp, #28]
 8004f46:	bfb8      	it	lt
 8004f48:	9204      	strlt	r2, [sp, #16]
 8004f4a:	7823      	ldrb	r3, [r4, #0]
 8004f4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f4e:	d10a      	bne.n	8004f66 <_vfiprintf_r+0x156>
 8004f50:	7863      	ldrb	r3, [r4, #1]
 8004f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f54:	d132      	bne.n	8004fbc <_vfiprintf_r+0x1ac>
 8004f56:	9b03      	ldr	r3, [sp, #12]
 8004f58:	1d1a      	adds	r2, r3, #4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	9203      	str	r2, [sp, #12]
 8004f5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f62:	3402      	adds	r4, #2
 8004f64:	9305      	str	r3, [sp, #20]
 8004f66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800503c <_vfiprintf_r+0x22c>
 8004f6a:	7821      	ldrb	r1, [r4, #0]
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	4650      	mov	r0, sl
 8004f70:	f7fb f92e 	bl	80001d0 <memchr>
 8004f74:	b138      	cbz	r0, 8004f86 <_vfiprintf_r+0x176>
 8004f76:	9b04      	ldr	r3, [sp, #16]
 8004f78:	eba0 000a 	sub.w	r0, r0, sl
 8004f7c:	2240      	movs	r2, #64	@ 0x40
 8004f7e:	4082      	lsls	r2, r0
 8004f80:	4313      	orrs	r3, r2
 8004f82:	3401      	adds	r4, #1
 8004f84:	9304      	str	r3, [sp, #16]
 8004f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f8a:	4829      	ldr	r0, [pc, #164]	@ (8005030 <_vfiprintf_r+0x220>)
 8004f8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f90:	2206      	movs	r2, #6
 8004f92:	f7fb f91d 	bl	80001d0 <memchr>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d03f      	beq.n	800501a <_vfiprintf_r+0x20a>
 8004f9a:	4b26      	ldr	r3, [pc, #152]	@ (8005034 <_vfiprintf_r+0x224>)
 8004f9c:	bb1b      	cbnz	r3, 8004fe6 <_vfiprintf_r+0x1d6>
 8004f9e:	9b03      	ldr	r3, [sp, #12]
 8004fa0:	3307      	adds	r3, #7
 8004fa2:	f023 0307 	bic.w	r3, r3, #7
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	9303      	str	r3, [sp, #12]
 8004faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fac:	443b      	add	r3, r7
 8004fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fb0:	e76a      	b.n	8004e88 <_vfiprintf_r+0x78>
 8004fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	2001      	movs	r0, #1
 8004fba:	e7a8      	b.n	8004f0e <_vfiprintf_r+0xfe>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	3401      	adds	r4, #1
 8004fc0:	9305      	str	r3, [sp, #20]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	f04f 0c0a 	mov.w	ip, #10
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fce:	3a30      	subs	r2, #48	@ 0x30
 8004fd0:	2a09      	cmp	r2, #9
 8004fd2:	d903      	bls.n	8004fdc <_vfiprintf_r+0x1cc>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0c6      	beq.n	8004f66 <_vfiprintf_r+0x156>
 8004fd8:	9105      	str	r1, [sp, #20]
 8004fda:	e7c4      	b.n	8004f66 <_vfiprintf_r+0x156>
 8004fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e7f0      	b.n	8004fc8 <_vfiprintf_r+0x1b8>
 8004fe6:	ab03      	add	r3, sp, #12
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	462a      	mov	r2, r5
 8004fec:	4b12      	ldr	r3, [pc, #72]	@ (8005038 <_vfiprintf_r+0x228>)
 8004fee:	a904      	add	r1, sp, #16
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f3af 8000 	nop.w
 8004ff6:	4607      	mov	r7, r0
 8004ff8:	1c78      	adds	r0, r7, #1
 8004ffa:	d1d6      	bne.n	8004faa <_vfiprintf_r+0x19a>
 8004ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ffe:	07d9      	lsls	r1, r3, #31
 8005000:	d405      	bmi.n	800500e <_vfiprintf_r+0x1fe>
 8005002:	89ab      	ldrh	r3, [r5, #12]
 8005004:	059a      	lsls	r2, r3, #22
 8005006:	d402      	bmi.n	800500e <_vfiprintf_r+0x1fe>
 8005008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800500a:	f7ff fddd 	bl	8004bc8 <__retarget_lock_release_recursive>
 800500e:	89ab      	ldrh	r3, [r5, #12]
 8005010:	065b      	lsls	r3, r3, #25
 8005012:	f53f af1f 	bmi.w	8004e54 <_vfiprintf_r+0x44>
 8005016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005018:	e71e      	b.n	8004e58 <_vfiprintf_r+0x48>
 800501a:	ab03      	add	r3, sp, #12
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	462a      	mov	r2, r5
 8005020:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <_vfiprintf_r+0x228>)
 8005022:	a904      	add	r1, sp, #16
 8005024:	4630      	mov	r0, r6
 8005026:	f000 f879 	bl	800511c <_printf_i>
 800502a:	e7e4      	b.n	8004ff6 <_vfiprintf_r+0x1e6>
 800502c:	08005c40 	.word	0x08005c40
 8005030:	08005c4a 	.word	0x08005c4a
 8005034:	00000000 	.word	0x00000000
 8005038:	08004deb 	.word	0x08004deb
 800503c:	08005c46 	.word	0x08005c46

08005040 <_printf_common>:
 8005040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	4616      	mov	r6, r2
 8005046:	4698      	mov	r8, r3
 8005048:	688a      	ldr	r2, [r1, #8]
 800504a:	690b      	ldr	r3, [r1, #16]
 800504c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005050:	4293      	cmp	r3, r2
 8005052:	bfb8      	it	lt
 8005054:	4613      	movlt	r3, r2
 8005056:	6033      	str	r3, [r6, #0]
 8005058:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800505c:	4607      	mov	r7, r0
 800505e:	460c      	mov	r4, r1
 8005060:	b10a      	cbz	r2, 8005066 <_printf_common+0x26>
 8005062:	3301      	adds	r3, #1
 8005064:	6033      	str	r3, [r6, #0]
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	0699      	lsls	r1, r3, #26
 800506a:	bf42      	ittt	mi
 800506c:	6833      	ldrmi	r3, [r6, #0]
 800506e:	3302      	addmi	r3, #2
 8005070:	6033      	strmi	r3, [r6, #0]
 8005072:	6825      	ldr	r5, [r4, #0]
 8005074:	f015 0506 	ands.w	r5, r5, #6
 8005078:	d106      	bne.n	8005088 <_printf_common+0x48>
 800507a:	f104 0a19 	add.w	sl, r4, #25
 800507e:	68e3      	ldr	r3, [r4, #12]
 8005080:	6832      	ldr	r2, [r6, #0]
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	42ab      	cmp	r3, r5
 8005086:	dc26      	bgt.n	80050d6 <_printf_common+0x96>
 8005088:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800508c:	6822      	ldr	r2, [r4, #0]
 800508e:	3b00      	subs	r3, #0
 8005090:	bf18      	it	ne
 8005092:	2301      	movne	r3, #1
 8005094:	0692      	lsls	r2, r2, #26
 8005096:	d42b      	bmi.n	80050f0 <_printf_common+0xb0>
 8005098:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800509c:	4641      	mov	r1, r8
 800509e:	4638      	mov	r0, r7
 80050a0:	47c8      	blx	r9
 80050a2:	3001      	adds	r0, #1
 80050a4:	d01e      	beq.n	80050e4 <_printf_common+0xa4>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	6922      	ldr	r2, [r4, #16]
 80050aa:	f003 0306 	and.w	r3, r3, #6
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	bf02      	ittt	eq
 80050b2:	68e5      	ldreq	r5, [r4, #12]
 80050b4:	6833      	ldreq	r3, [r6, #0]
 80050b6:	1aed      	subeq	r5, r5, r3
 80050b8:	68a3      	ldr	r3, [r4, #8]
 80050ba:	bf0c      	ite	eq
 80050bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050c0:	2500      	movne	r5, #0
 80050c2:	4293      	cmp	r3, r2
 80050c4:	bfc4      	itt	gt
 80050c6:	1a9b      	subgt	r3, r3, r2
 80050c8:	18ed      	addgt	r5, r5, r3
 80050ca:	2600      	movs	r6, #0
 80050cc:	341a      	adds	r4, #26
 80050ce:	42b5      	cmp	r5, r6
 80050d0:	d11a      	bne.n	8005108 <_printf_common+0xc8>
 80050d2:	2000      	movs	r0, #0
 80050d4:	e008      	b.n	80050e8 <_printf_common+0xa8>
 80050d6:	2301      	movs	r3, #1
 80050d8:	4652      	mov	r2, sl
 80050da:	4641      	mov	r1, r8
 80050dc:	4638      	mov	r0, r7
 80050de:	47c8      	blx	r9
 80050e0:	3001      	adds	r0, #1
 80050e2:	d103      	bne.n	80050ec <_printf_common+0xac>
 80050e4:	f04f 30ff 	mov.w	r0, #4294967295
 80050e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ec:	3501      	adds	r5, #1
 80050ee:	e7c6      	b.n	800507e <_printf_common+0x3e>
 80050f0:	18e1      	adds	r1, r4, r3
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	2030      	movs	r0, #48	@ 0x30
 80050f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050fa:	4422      	add	r2, r4
 80050fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005100:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005104:	3302      	adds	r3, #2
 8005106:	e7c7      	b.n	8005098 <_printf_common+0x58>
 8005108:	2301      	movs	r3, #1
 800510a:	4622      	mov	r2, r4
 800510c:	4641      	mov	r1, r8
 800510e:	4638      	mov	r0, r7
 8005110:	47c8      	blx	r9
 8005112:	3001      	adds	r0, #1
 8005114:	d0e6      	beq.n	80050e4 <_printf_common+0xa4>
 8005116:	3601      	adds	r6, #1
 8005118:	e7d9      	b.n	80050ce <_printf_common+0x8e>
	...

0800511c <_printf_i>:
 800511c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005120:	7e0f      	ldrb	r7, [r1, #24]
 8005122:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005124:	2f78      	cmp	r7, #120	@ 0x78
 8005126:	4691      	mov	r9, r2
 8005128:	4680      	mov	r8, r0
 800512a:	460c      	mov	r4, r1
 800512c:	469a      	mov	sl, r3
 800512e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005132:	d807      	bhi.n	8005144 <_printf_i+0x28>
 8005134:	2f62      	cmp	r7, #98	@ 0x62
 8005136:	d80a      	bhi.n	800514e <_printf_i+0x32>
 8005138:	2f00      	cmp	r7, #0
 800513a:	f000 80d2 	beq.w	80052e2 <_printf_i+0x1c6>
 800513e:	2f58      	cmp	r7, #88	@ 0x58
 8005140:	f000 80b9 	beq.w	80052b6 <_printf_i+0x19a>
 8005144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005148:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800514c:	e03a      	b.n	80051c4 <_printf_i+0xa8>
 800514e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005152:	2b15      	cmp	r3, #21
 8005154:	d8f6      	bhi.n	8005144 <_printf_i+0x28>
 8005156:	a101      	add	r1, pc, #4	@ (adr r1, 800515c <_printf_i+0x40>)
 8005158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800515c:	080051b5 	.word	0x080051b5
 8005160:	080051c9 	.word	0x080051c9
 8005164:	08005145 	.word	0x08005145
 8005168:	08005145 	.word	0x08005145
 800516c:	08005145 	.word	0x08005145
 8005170:	08005145 	.word	0x08005145
 8005174:	080051c9 	.word	0x080051c9
 8005178:	08005145 	.word	0x08005145
 800517c:	08005145 	.word	0x08005145
 8005180:	08005145 	.word	0x08005145
 8005184:	08005145 	.word	0x08005145
 8005188:	080052c9 	.word	0x080052c9
 800518c:	080051f3 	.word	0x080051f3
 8005190:	08005283 	.word	0x08005283
 8005194:	08005145 	.word	0x08005145
 8005198:	08005145 	.word	0x08005145
 800519c:	080052eb 	.word	0x080052eb
 80051a0:	08005145 	.word	0x08005145
 80051a4:	080051f3 	.word	0x080051f3
 80051a8:	08005145 	.word	0x08005145
 80051ac:	08005145 	.word	0x08005145
 80051b0:	0800528b 	.word	0x0800528b
 80051b4:	6833      	ldr	r3, [r6, #0]
 80051b6:	1d1a      	adds	r2, r3, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6032      	str	r2, [r6, #0]
 80051bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051c4:	2301      	movs	r3, #1
 80051c6:	e09d      	b.n	8005304 <_printf_i+0x1e8>
 80051c8:	6833      	ldr	r3, [r6, #0]
 80051ca:	6820      	ldr	r0, [r4, #0]
 80051cc:	1d19      	adds	r1, r3, #4
 80051ce:	6031      	str	r1, [r6, #0]
 80051d0:	0606      	lsls	r6, r0, #24
 80051d2:	d501      	bpl.n	80051d8 <_printf_i+0xbc>
 80051d4:	681d      	ldr	r5, [r3, #0]
 80051d6:	e003      	b.n	80051e0 <_printf_i+0xc4>
 80051d8:	0645      	lsls	r5, r0, #25
 80051da:	d5fb      	bpl.n	80051d4 <_printf_i+0xb8>
 80051dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051e0:	2d00      	cmp	r5, #0
 80051e2:	da03      	bge.n	80051ec <_printf_i+0xd0>
 80051e4:	232d      	movs	r3, #45	@ 0x2d
 80051e6:	426d      	negs	r5, r5
 80051e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051ec:	4859      	ldr	r0, [pc, #356]	@ (8005354 <_printf_i+0x238>)
 80051ee:	230a      	movs	r3, #10
 80051f0:	e011      	b.n	8005216 <_printf_i+0xfa>
 80051f2:	6821      	ldr	r1, [r4, #0]
 80051f4:	6833      	ldr	r3, [r6, #0]
 80051f6:	0608      	lsls	r0, r1, #24
 80051f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80051fc:	d402      	bmi.n	8005204 <_printf_i+0xe8>
 80051fe:	0649      	lsls	r1, r1, #25
 8005200:	bf48      	it	mi
 8005202:	b2ad      	uxthmi	r5, r5
 8005204:	2f6f      	cmp	r7, #111	@ 0x6f
 8005206:	4853      	ldr	r0, [pc, #332]	@ (8005354 <_printf_i+0x238>)
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	bf14      	ite	ne
 800520c:	230a      	movne	r3, #10
 800520e:	2308      	moveq	r3, #8
 8005210:	2100      	movs	r1, #0
 8005212:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005216:	6866      	ldr	r6, [r4, #4]
 8005218:	60a6      	str	r6, [r4, #8]
 800521a:	2e00      	cmp	r6, #0
 800521c:	bfa2      	ittt	ge
 800521e:	6821      	ldrge	r1, [r4, #0]
 8005220:	f021 0104 	bicge.w	r1, r1, #4
 8005224:	6021      	strge	r1, [r4, #0]
 8005226:	b90d      	cbnz	r5, 800522c <_printf_i+0x110>
 8005228:	2e00      	cmp	r6, #0
 800522a:	d04b      	beq.n	80052c4 <_printf_i+0x1a8>
 800522c:	4616      	mov	r6, r2
 800522e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005232:	fb03 5711 	mls	r7, r3, r1, r5
 8005236:	5dc7      	ldrb	r7, [r0, r7]
 8005238:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800523c:	462f      	mov	r7, r5
 800523e:	42bb      	cmp	r3, r7
 8005240:	460d      	mov	r5, r1
 8005242:	d9f4      	bls.n	800522e <_printf_i+0x112>
 8005244:	2b08      	cmp	r3, #8
 8005246:	d10b      	bne.n	8005260 <_printf_i+0x144>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	07df      	lsls	r7, r3, #31
 800524c:	d508      	bpl.n	8005260 <_printf_i+0x144>
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	6861      	ldr	r1, [r4, #4]
 8005252:	4299      	cmp	r1, r3
 8005254:	bfde      	ittt	le
 8005256:	2330      	movle	r3, #48	@ 0x30
 8005258:	f806 3c01 	strble.w	r3, [r6, #-1]
 800525c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005260:	1b92      	subs	r2, r2, r6
 8005262:	6122      	str	r2, [r4, #16]
 8005264:	f8cd a000 	str.w	sl, [sp]
 8005268:	464b      	mov	r3, r9
 800526a:	aa03      	add	r2, sp, #12
 800526c:	4621      	mov	r1, r4
 800526e:	4640      	mov	r0, r8
 8005270:	f7ff fee6 	bl	8005040 <_printf_common>
 8005274:	3001      	adds	r0, #1
 8005276:	d14a      	bne.n	800530e <_printf_i+0x1f2>
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	b004      	add	sp, #16
 800527e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	f043 0320 	orr.w	r3, r3, #32
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	4833      	ldr	r0, [pc, #204]	@ (8005358 <_printf_i+0x23c>)
 800528c:	2778      	movs	r7, #120	@ 0x78
 800528e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	6831      	ldr	r1, [r6, #0]
 8005296:	061f      	lsls	r7, r3, #24
 8005298:	f851 5b04 	ldr.w	r5, [r1], #4
 800529c:	d402      	bmi.n	80052a4 <_printf_i+0x188>
 800529e:	065f      	lsls	r7, r3, #25
 80052a0:	bf48      	it	mi
 80052a2:	b2ad      	uxthmi	r5, r5
 80052a4:	6031      	str	r1, [r6, #0]
 80052a6:	07d9      	lsls	r1, r3, #31
 80052a8:	bf44      	itt	mi
 80052aa:	f043 0320 	orrmi.w	r3, r3, #32
 80052ae:	6023      	strmi	r3, [r4, #0]
 80052b0:	b11d      	cbz	r5, 80052ba <_printf_i+0x19e>
 80052b2:	2310      	movs	r3, #16
 80052b4:	e7ac      	b.n	8005210 <_printf_i+0xf4>
 80052b6:	4827      	ldr	r0, [pc, #156]	@ (8005354 <_printf_i+0x238>)
 80052b8:	e7e9      	b.n	800528e <_printf_i+0x172>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	f023 0320 	bic.w	r3, r3, #32
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	e7f6      	b.n	80052b2 <_printf_i+0x196>
 80052c4:	4616      	mov	r6, r2
 80052c6:	e7bd      	b.n	8005244 <_printf_i+0x128>
 80052c8:	6833      	ldr	r3, [r6, #0]
 80052ca:	6825      	ldr	r5, [r4, #0]
 80052cc:	6961      	ldr	r1, [r4, #20]
 80052ce:	1d18      	adds	r0, r3, #4
 80052d0:	6030      	str	r0, [r6, #0]
 80052d2:	062e      	lsls	r6, r5, #24
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	d501      	bpl.n	80052dc <_printf_i+0x1c0>
 80052d8:	6019      	str	r1, [r3, #0]
 80052da:	e002      	b.n	80052e2 <_printf_i+0x1c6>
 80052dc:	0668      	lsls	r0, r5, #25
 80052de:	d5fb      	bpl.n	80052d8 <_printf_i+0x1bc>
 80052e0:	8019      	strh	r1, [r3, #0]
 80052e2:	2300      	movs	r3, #0
 80052e4:	6123      	str	r3, [r4, #16]
 80052e6:	4616      	mov	r6, r2
 80052e8:	e7bc      	b.n	8005264 <_printf_i+0x148>
 80052ea:	6833      	ldr	r3, [r6, #0]
 80052ec:	1d1a      	adds	r2, r3, #4
 80052ee:	6032      	str	r2, [r6, #0]
 80052f0:	681e      	ldr	r6, [r3, #0]
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	2100      	movs	r1, #0
 80052f6:	4630      	mov	r0, r6
 80052f8:	f7fa ff6a 	bl	80001d0 <memchr>
 80052fc:	b108      	cbz	r0, 8005302 <_printf_i+0x1e6>
 80052fe:	1b80      	subs	r0, r0, r6
 8005300:	6060      	str	r0, [r4, #4]
 8005302:	6863      	ldr	r3, [r4, #4]
 8005304:	6123      	str	r3, [r4, #16]
 8005306:	2300      	movs	r3, #0
 8005308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800530c:	e7aa      	b.n	8005264 <_printf_i+0x148>
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	4632      	mov	r2, r6
 8005312:	4649      	mov	r1, r9
 8005314:	4640      	mov	r0, r8
 8005316:	47d0      	blx	sl
 8005318:	3001      	adds	r0, #1
 800531a:	d0ad      	beq.n	8005278 <_printf_i+0x15c>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	079b      	lsls	r3, r3, #30
 8005320:	d413      	bmi.n	800534a <_printf_i+0x22e>
 8005322:	68e0      	ldr	r0, [r4, #12]
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	4298      	cmp	r0, r3
 8005328:	bfb8      	it	lt
 800532a:	4618      	movlt	r0, r3
 800532c:	e7a6      	b.n	800527c <_printf_i+0x160>
 800532e:	2301      	movs	r3, #1
 8005330:	4632      	mov	r2, r6
 8005332:	4649      	mov	r1, r9
 8005334:	4640      	mov	r0, r8
 8005336:	47d0      	blx	sl
 8005338:	3001      	adds	r0, #1
 800533a:	d09d      	beq.n	8005278 <_printf_i+0x15c>
 800533c:	3501      	adds	r5, #1
 800533e:	68e3      	ldr	r3, [r4, #12]
 8005340:	9903      	ldr	r1, [sp, #12]
 8005342:	1a5b      	subs	r3, r3, r1
 8005344:	42ab      	cmp	r3, r5
 8005346:	dcf2      	bgt.n	800532e <_printf_i+0x212>
 8005348:	e7eb      	b.n	8005322 <_printf_i+0x206>
 800534a:	2500      	movs	r5, #0
 800534c:	f104 0619 	add.w	r6, r4, #25
 8005350:	e7f5      	b.n	800533e <_printf_i+0x222>
 8005352:	bf00      	nop
 8005354:	08005c51 	.word	0x08005c51
 8005358:	08005c62 	.word	0x08005c62

0800535c <__sflush_r>:
 800535c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005364:	0716      	lsls	r6, r2, #28
 8005366:	4605      	mov	r5, r0
 8005368:	460c      	mov	r4, r1
 800536a:	d454      	bmi.n	8005416 <__sflush_r+0xba>
 800536c:	684b      	ldr	r3, [r1, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	dc02      	bgt.n	8005378 <__sflush_r+0x1c>
 8005372:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	dd48      	ble.n	800540a <__sflush_r+0xae>
 8005378:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800537a:	2e00      	cmp	r6, #0
 800537c:	d045      	beq.n	800540a <__sflush_r+0xae>
 800537e:	2300      	movs	r3, #0
 8005380:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005384:	682f      	ldr	r7, [r5, #0]
 8005386:	6a21      	ldr	r1, [r4, #32]
 8005388:	602b      	str	r3, [r5, #0]
 800538a:	d030      	beq.n	80053ee <__sflush_r+0x92>
 800538c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	0759      	lsls	r1, r3, #29
 8005392:	d505      	bpl.n	80053a0 <__sflush_r+0x44>
 8005394:	6863      	ldr	r3, [r4, #4]
 8005396:	1ad2      	subs	r2, r2, r3
 8005398:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800539a:	b10b      	cbz	r3, 80053a0 <__sflush_r+0x44>
 800539c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	2300      	movs	r3, #0
 80053a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053a4:	6a21      	ldr	r1, [r4, #32]
 80053a6:	4628      	mov	r0, r5
 80053a8:	47b0      	blx	r6
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	d106      	bne.n	80053be <__sflush_r+0x62>
 80053b0:	6829      	ldr	r1, [r5, #0]
 80053b2:	291d      	cmp	r1, #29
 80053b4:	d82b      	bhi.n	800540e <__sflush_r+0xb2>
 80053b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005460 <__sflush_r+0x104>)
 80053b8:	410a      	asrs	r2, r1
 80053ba:	07d6      	lsls	r6, r2, #31
 80053bc:	d427      	bmi.n	800540e <__sflush_r+0xb2>
 80053be:	2200      	movs	r2, #0
 80053c0:	6062      	str	r2, [r4, #4]
 80053c2:	04d9      	lsls	r1, r3, #19
 80053c4:	6922      	ldr	r2, [r4, #16]
 80053c6:	6022      	str	r2, [r4, #0]
 80053c8:	d504      	bpl.n	80053d4 <__sflush_r+0x78>
 80053ca:	1c42      	adds	r2, r0, #1
 80053cc:	d101      	bne.n	80053d2 <__sflush_r+0x76>
 80053ce:	682b      	ldr	r3, [r5, #0]
 80053d0:	b903      	cbnz	r3, 80053d4 <__sflush_r+0x78>
 80053d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80053d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053d6:	602f      	str	r7, [r5, #0]
 80053d8:	b1b9      	cbz	r1, 800540a <__sflush_r+0xae>
 80053da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053de:	4299      	cmp	r1, r3
 80053e0:	d002      	beq.n	80053e8 <__sflush_r+0x8c>
 80053e2:	4628      	mov	r0, r5
 80053e4:	f7ff fbf2 	bl	8004bcc <_free_r>
 80053e8:	2300      	movs	r3, #0
 80053ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80053ec:	e00d      	b.n	800540a <__sflush_r+0xae>
 80053ee:	2301      	movs	r3, #1
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b0      	blx	r6
 80053f4:	4602      	mov	r2, r0
 80053f6:	1c50      	adds	r0, r2, #1
 80053f8:	d1c9      	bne.n	800538e <__sflush_r+0x32>
 80053fa:	682b      	ldr	r3, [r5, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0c6      	beq.n	800538e <__sflush_r+0x32>
 8005400:	2b1d      	cmp	r3, #29
 8005402:	d001      	beq.n	8005408 <__sflush_r+0xac>
 8005404:	2b16      	cmp	r3, #22
 8005406:	d11e      	bne.n	8005446 <__sflush_r+0xea>
 8005408:	602f      	str	r7, [r5, #0]
 800540a:	2000      	movs	r0, #0
 800540c:	e022      	b.n	8005454 <__sflush_r+0xf8>
 800540e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005412:	b21b      	sxth	r3, r3
 8005414:	e01b      	b.n	800544e <__sflush_r+0xf2>
 8005416:	690f      	ldr	r7, [r1, #16]
 8005418:	2f00      	cmp	r7, #0
 800541a:	d0f6      	beq.n	800540a <__sflush_r+0xae>
 800541c:	0793      	lsls	r3, r2, #30
 800541e:	680e      	ldr	r6, [r1, #0]
 8005420:	bf08      	it	eq
 8005422:	694b      	ldreq	r3, [r1, #20]
 8005424:	600f      	str	r7, [r1, #0]
 8005426:	bf18      	it	ne
 8005428:	2300      	movne	r3, #0
 800542a:	eba6 0807 	sub.w	r8, r6, r7
 800542e:	608b      	str	r3, [r1, #8]
 8005430:	f1b8 0f00 	cmp.w	r8, #0
 8005434:	dde9      	ble.n	800540a <__sflush_r+0xae>
 8005436:	6a21      	ldr	r1, [r4, #32]
 8005438:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800543a:	4643      	mov	r3, r8
 800543c:	463a      	mov	r2, r7
 800543e:	4628      	mov	r0, r5
 8005440:	47b0      	blx	r6
 8005442:	2800      	cmp	r0, #0
 8005444:	dc08      	bgt.n	8005458 <__sflush_r+0xfc>
 8005446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800544a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005458:	4407      	add	r7, r0
 800545a:	eba8 0800 	sub.w	r8, r8, r0
 800545e:	e7e7      	b.n	8005430 <__sflush_r+0xd4>
 8005460:	dfbffffe 	.word	0xdfbffffe

08005464 <_fflush_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	690b      	ldr	r3, [r1, #16]
 8005468:	4605      	mov	r5, r0
 800546a:	460c      	mov	r4, r1
 800546c:	b913      	cbnz	r3, 8005474 <_fflush_r+0x10>
 800546e:	2500      	movs	r5, #0
 8005470:	4628      	mov	r0, r5
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	b118      	cbz	r0, 800547e <_fflush_r+0x1a>
 8005476:	6a03      	ldr	r3, [r0, #32]
 8005478:	b90b      	cbnz	r3, 800547e <_fflush_r+0x1a>
 800547a:	f7ff fa9f 	bl	80049bc <__sinit>
 800547e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f3      	beq.n	800546e <_fflush_r+0xa>
 8005486:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005488:	07d0      	lsls	r0, r2, #31
 800548a:	d404      	bmi.n	8005496 <_fflush_r+0x32>
 800548c:	0599      	lsls	r1, r3, #22
 800548e:	d402      	bmi.n	8005496 <_fflush_r+0x32>
 8005490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005492:	f7ff fb98 	bl	8004bc6 <__retarget_lock_acquire_recursive>
 8005496:	4628      	mov	r0, r5
 8005498:	4621      	mov	r1, r4
 800549a:	f7ff ff5f 	bl	800535c <__sflush_r>
 800549e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054a0:	07da      	lsls	r2, r3, #31
 80054a2:	4605      	mov	r5, r0
 80054a4:	d4e4      	bmi.n	8005470 <_fflush_r+0xc>
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	059b      	lsls	r3, r3, #22
 80054aa:	d4e1      	bmi.n	8005470 <_fflush_r+0xc>
 80054ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ae:	f7ff fb8b 	bl	8004bc8 <__retarget_lock_release_recursive>
 80054b2:	e7dd      	b.n	8005470 <_fflush_r+0xc>

080054b4 <__swbuf_r>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	460e      	mov	r6, r1
 80054b8:	4614      	mov	r4, r2
 80054ba:	4605      	mov	r5, r0
 80054bc:	b118      	cbz	r0, 80054c6 <__swbuf_r+0x12>
 80054be:	6a03      	ldr	r3, [r0, #32]
 80054c0:	b90b      	cbnz	r3, 80054c6 <__swbuf_r+0x12>
 80054c2:	f7ff fa7b 	bl	80049bc <__sinit>
 80054c6:	69a3      	ldr	r3, [r4, #24]
 80054c8:	60a3      	str	r3, [r4, #8]
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	071a      	lsls	r2, r3, #28
 80054ce:	d501      	bpl.n	80054d4 <__swbuf_r+0x20>
 80054d0:	6923      	ldr	r3, [r4, #16]
 80054d2:	b943      	cbnz	r3, 80054e6 <__swbuf_r+0x32>
 80054d4:	4621      	mov	r1, r4
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 f82a 	bl	8005530 <__swsetup_r>
 80054dc:	b118      	cbz	r0, 80054e6 <__swbuf_r+0x32>
 80054de:	f04f 37ff 	mov.w	r7, #4294967295
 80054e2:	4638      	mov	r0, r7
 80054e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	6922      	ldr	r2, [r4, #16]
 80054ea:	1a98      	subs	r0, r3, r2
 80054ec:	6963      	ldr	r3, [r4, #20]
 80054ee:	b2f6      	uxtb	r6, r6
 80054f0:	4283      	cmp	r3, r0
 80054f2:	4637      	mov	r7, r6
 80054f4:	dc05      	bgt.n	8005502 <__swbuf_r+0x4e>
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	f7ff ffb3 	bl	8005464 <_fflush_r>
 80054fe:	2800      	cmp	r0, #0
 8005500:	d1ed      	bne.n	80054de <__swbuf_r+0x2a>
 8005502:	68a3      	ldr	r3, [r4, #8]
 8005504:	3b01      	subs	r3, #1
 8005506:	60a3      	str	r3, [r4, #8]
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	6022      	str	r2, [r4, #0]
 800550e:	701e      	strb	r6, [r3, #0]
 8005510:	6962      	ldr	r2, [r4, #20]
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	429a      	cmp	r2, r3
 8005516:	d004      	beq.n	8005522 <__swbuf_r+0x6e>
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	07db      	lsls	r3, r3, #31
 800551c:	d5e1      	bpl.n	80054e2 <__swbuf_r+0x2e>
 800551e:	2e0a      	cmp	r6, #10
 8005520:	d1df      	bne.n	80054e2 <__swbuf_r+0x2e>
 8005522:	4621      	mov	r1, r4
 8005524:	4628      	mov	r0, r5
 8005526:	f7ff ff9d 	bl	8005464 <_fflush_r>
 800552a:	2800      	cmp	r0, #0
 800552c:	d0d9      	beq.n	80054e2 <__swbuf_r+0x2e>
 800552e:	e7d6      	b.n	80054de <__swbuf_r+0x2a>

08005530 <__swsetup_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4b29      	ldr	r3, [pc, #164]	@ (80055d8 <__swsetup_r+0xa8>)
 8005534:	4605      	mov	r5, r0
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	460c      	mov	r4, r1
 800553a:	b118      	cbz	r0, 8005544 <__swsetup_r+0x14>
 800553c:	6a03      	ldr	r3, [r0, #32]
 800553e:	b90b      	cbnz	r3, 8005544 <__swsetup_r+0x14>
 8005540:	f7ff fa3c 	bl	80049bc <__sinit>
 8005544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005548:	0719      	lsls	r1, r3, #28
 800554a:	d422      	bmi.n	8005592 <__swsetup_r+0x62>
 800554c:	06da      	lsls	r2, r3, #27
 800554e:	d407      	bmi.n	8005560 <__swsetup_r+0x30>
 8005550:	2209      	movs	r2, #9
 8005552:	602a      	str	r2, [r5, #0]
 8005554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005558:	81a3      	strh	r3, [r4, #12]
 800555a:	f04f 30ff 	mov.w	r0, #4294967295
 800555e:	e033      	b.n	80055c8 <__swsetup_r+0x98>
 8005560:	0758      	lsls	r0, r3, #29
 8005562:	d512      	bpl.n	800558a <__swsetup_r+0x5a>
 8005564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005566:	b141      	cbz	r1, 800557a <__swsetup_r+0x4a>
 8005568:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800556c:	4299      	cmp	r1, r3
 800556e:	d002      	beq.n	8005576 <__swsetup_r+0x46>
 8005570:	4628      	mov	r0, r5
 8005572:	f7ff fb2b 	bl	8004bcc <_free_r>
 8005576:	2300      	movs	r3, #0
 8005578:	6363      	str	r3, [r4, #52]	@ 0x34
 800557a:	89a3      	ldrh	r3, [r4, #12]
 800557c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005580:	81a3      	strh	r3, [r4, #12]
 8005582:	2300      	movs	r3, #0
 8005584:	6063      	str	r3, [r4, #4]
 8005586:	6923      	ldr	r3, [r4, #16]
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	f043 0308 	orr.w	r3, r3, #8
 8005590:	81a3      	strh	r3, [r4, #12]
 8005592:	6923      	ldr	r3, [r4, #16]
 8005594:	b94b      	cbnz	r3, 80055aa <__swsetup_r+0x7a>
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800559c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055a0:	d003      	beq.n	80055aa <__swsetup_r+0x7a>
 80055a2:	4621      	mov	r1, r4
 80055a4:	4628      	mov	r0, r5
 80055a6:	f000 f84f 	bl	8005648 <__smakebuf_r>
 80055aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ae:	f013 0201 	ands.w	r2, r3, #1
 80055b2:	d00a      	beq.n	80055ca <__swsetup_r+0x9a>
 80055b4:	2200      	movs	r2, #0
 80055b6:	60a2      	str	r2, [r4, #8]
 80055b8:	6962      	ldr	r2, [r4, #20]
 80055ba:	4252      	negs	r2, r2
 80055bc:	61a2      	str	r2, [r4, #24]
 80055be:	6922      	ldr	r2, [r4, #16]
 80055c0:	b942      	cbnz	r2, 80055d4 <__swsetup_r+0xa4>
 80055c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055c6:	d1c5      	bne.n	8005554 <__swsetup_r+0x24>
 80055c8:	bd38      	pop	{r3, r4, r5, pc}
 80055ca:	0799      	lsls	r1, r3, #30
 80055cc:	bf58      	it	pl
 80055ce:	6962      	ldrpl	r2, [r4, #20]
 80055d0:	60a2      	str	r2, [r4, #8]
 80055d2:	e7f4      	b.n	80055be <__swsetup_r+0x8e>
 80055d4:	2000      	movs	r0, #0
 80055d6:	e7f7      	b.n	80055c8 <__swsetup_r+0x98>
 80055d8:	20000020 	.word	0x20000020

080055dc <_sbrk_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4d06      	ldr	r5, [pc, #24]	@ (80055f8 <_sbrk_r+0x1c>)
 80055e0:	2300      	movs	r3, #0
 80055e2:	4604      	mov	r4, r0
 80055e4:	4608      	mov	r0, r1
 80055e6:	602b      	str	r3, [r5, #0]
 80055e8:	f7fc f960 	bl	80018ac <_sbrk>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d102      	bne.n	80055f6 <_sbrk_r+0x1a>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	b103      	cbz	r3, 80055f6 <_sbrk_r+0x1a>
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	2000027c 	.word	0x2000027c

080055fc <__swhatbuf_r>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	460c      	mov	r4, r1
 8005600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005604:	2900      	cmp	r1, #0
 8005606:	b096      	sub	sp, #88	@ 0x58
 8005608:	4615      	mov	r5, r2
 800560a:	461e      	mov	r6, r3
 800560c:	da0d      	bge.n	800562a <__swhatbuf_r+0x2e>
 800560e:	89a3      	ldrh	r3, [r4, #12]
 8005610:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005614:	f04f 0100 	mov.w	r1, #0
 8005618:	bf14      	ite	ne
 800561a:	2340      	movne	r3, #64	@ 0x40
 800561c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005620:	2000      	movs	r0, #0
 8005622:	6031      	str	r1, [r6, #0]
 8005624:	602b      	str	r3, [r5, #0]
 8005626:	b016      	add	sp, #88	@ 0x58
 8005628:	bd70      	pop	{r4, r5, r6, pc}
 800562a:	466a      	mov	r2, sp
 800562c:	f000 f848 	bl	80056c0 <_fstat_r>
 8005630:	2800      	cmp	r0, #0
 8005632:	dbec      	blt.n	800560e <__swhatbuf_r+0x12>
 8005634:	9901      	ldr	r1, [sp, #4]
 8005636:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800563a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800563e:	4259      	negs	r1, r3
 8005640:	4159      	adcs	r1, r3
 8005642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005646:	e7eb      	b.n	8005620 <__swhatbuf_r+0x24>

08005648 <__smakebuf_r>:
 8005648:	898b      	ldrh	r3, [r1, #12]
 800564a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800564c:	079d      	lsls	r5, r3, #30
 800564e:	4606      	mov	r6, r0
 8005650:	460c      	mov	r4, r1
 8005652:	d507      	bpl.n	8005664 <__smakebuf_r+0x1c>
 8005654:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	2301      	movs	r3, #1
 800565e:	6163      	str	r3, [r4, #20]
 8005660:	b003      	add	sp, #12
 8005662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005664:	ab01      	add	r3, sp, #4
 8005666:	466a      	mov	r2, sp
 8005668:	f7ff ffc8 	bl	80055fc <__swhatbuf_r>
 800566c:	9f00      	ldr	r7, [sp, #0]
 800566e:	4605      	mov	r5, r0
 8005670:	4639      	mov	r1, r7
 8005672:	4630      	mov	r0, r6
 8005674:	f7ff fb16 	bl	8004ca4 <_malloc_r>
 8005678:	b948      	cbnz	r0, 800568e <__smakebuf_r+0x46>
 800567a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800567e:	059a      	lsls	r2, r3, #22
 8005680:	d4ee      	bmi.n	8005660 <__smakebuf_r+0x18>
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	f043 0302 	orr.w	r3, r3, #2
 800568a:	81a3      	strh	r3, [r4, #12]
 800568c:	e7e2      	b.n	8005654 <__smakebuf_r+0xc>
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	6020      	str	r0, [r4, #0]
 8005692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005696:	81a3      	strh	r3, [r4, #12]
 8005698:	9b01      	ldr	r3, [sp, #4]
 800569a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800569e:	b15b      	cbz	r3, 80056b8 <__smakebuf_r+0x70>
 80056a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056a4:	4630      	mov	r0, r6
 80056a6:	f000 f81d 	bl	80056e4 <_isatty_r>
 80056aa:	b128      	cbz	r0, 80056b8 <__smakebuf_r+0x70>
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	81a3      	strh	r3, [r4, #12]
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	431d      	orrs	r5, r3
 80056bc:	81a5      	strh	r5, [r4, #12]
 80056be:	e7cf      	b.n	8005660 <__smakebuf_r+0x18>

080056c0 <_fstat_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4d07      	ldr	r5, [pc, #28]	@ (80056e0 <_fstat_r+0x20>)
 80056c4:	2300      	movs	r3, #0
 80056c6:	4604      	mov	r4, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	4611      	mov	r1, r2
 80056cc:	602b      	str	r3, [r5, #0]
 80056ce:	f7fc f8c4 	bl	800185a <_fstat>
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	d102      	bne.n	80056dc <_fstat_r+0x1c>
 80056d6:	682b      	ldr	r3, [r5, #0]
 80056d8:	b103      	cbz	r3, 80056dc <_fstat_r+0x1c>
 80056da:	6023      	str	r3, [r4, #0]
 80056dc:	bd38      	pop	{r3, r4, r5, pc}
 80056de:	bf00      	nop
 80056e0:	2000027c 	.word	0x2000027c

080056e4 <_isatty_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4d06      	ldr	r5, [pc, #24]	@ (8005700 <_isatty_r+0x1c>)
 80056e8:	2300      	movs	r3, #0
 80056ea:	4604      	mov	r4, r0
 80056ec:	4608      	mov	r0, r1
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	f7fc f8c3 	bl	800187a <_isatty>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_isatty_r+0x1a>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_isatty_r+0x1a>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	2000027c 	.word	0x2000027c

08005704 <atan2>:
 8005704:	f000 b800 	b.w	8005708 <__ieee754_atan2>

08005708 <__ieee754_atan2>:
 8005708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800570c:	ec57 6b11 	vmov	r6, r7, d1
 8005710:	4273      	negs	r3, r6
 8005712:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8005890 <__ieee754_atan2+0x188>
 8005716:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800571a:	4333      	orrs	r3, r6
 800571c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005720:	4543      	cmp	r3, r8
 8005722:	ec51 0b10 	vmov	r0, r1, d0
 8005726:	4635      	mov	r5, r6
 8005728:	d809      	bhi.n	800573e <__ieee754_atan2+0x36>
 800572a:	4244      	negs	r4, r0
 800572c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005730:	4304      	orrs	r4, r0
 8005732:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005736:	4544      	cmp	r4, r8
 8005738:	468e      	mov	lr, r1
 800573a:	4681      	mov	r9, r0
 800573c:	d907      	bls.n	800574e <__ieee754_atan2+0x46>
 800573e:	4632      	mov	r2, r6
 8005740:	463b      	mov	r3, r7
 8005742:	f7fa fd9b 	bl	800027c <__adddf3>
 8005746:	ec41 0b10 	vmov	d0, r0, r1
 800574a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800574e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8005752:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8005756:	4334      	orrs	r4, r6
 8005758:	d103      	bne.n	8005762 <__ieee754_atan2+0x5a>
 800575a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800575e:	f000 b89b 	b.w	8005898 <atan>
 8005762:	17bc      	asrs	r4, r7, #30
 8005764:	f004 0402 	and.w	r4, r4, #2
 8005768:	ea53 0909 	orrs.w	r9, r3, r9
 800576c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005770:	d107      	bne.n	8005782 <__ieee754_atan2+0x7a>
 8005772:	2c02      	cmp	r4, #2
 8005774:	d05f      	beq.n	8005836 <__ieee754_atan2+0x12e>
 8005776:	2c03      	cmp	r4, #3
 8005778:	d1e5      	bne.n	8005746 <__ieee754_atan2+0x3e>
 800577a:	a141      	add	r1, pc, #260	@ (adr r1, 8005880 <__ieee754_atan2+0x178>)
 800577c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005780:	e7e1      	b.n	8005746 <__ieee754_atan2+0x3e>
 8005782:	4315      	orrs	r5, r2
 8005784:	d106      	bne.n	8005794 <__ieee754_atan2+0x8c>
 8005786:	f1be 0f00 	cmp.w	lr, #0
 800578a:	da5f      	bge.n	800584c <__ieee754_atan2+0x144>
 800578c:	a13e      	add	r1, pc, #248	@ (adr r1, 8005888 <__ieee754_atan2+0x180>)
 800578e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005792:	e7d8      	b.n	8005746 <__ieee754_atan2+0x3e>
 8005794:	4542      	cmp	r2, r8
 8005796:	d10f      	bne.n	80057b8 <__ieee754_atan2+0xb0>
 8005798:	4293      	cmp	r3, r2
 800579a:	f104 34ff 	add.w	r4, r4, #4294967295
 800579e:	d107      	bne.n	80057b0 <__ieee754_atan2+0xa8>
 80057a0:	2c02      	cmp	r4, #2
 80057a2:	d84c      	bhi.n	800583e <__ieee754_atan2+0x136>
 80057a4:	4b34      	ldr	r3, [pc, #208]	@ (8005878 <__ieee754_atan2+0x170>)
 80057a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057ae:	e7ca      	b.n	8005746 <__ieee754_atan2+0x3e>
 80057b0:	2c02      	cmp	r4, #2
 80057b2:	d848      	bhi.n	8005846 <__ieee754_atan2+0x13e>
 80057b4:	4b31      	ldr	r3, [pc, #196]	@ (800587c <__ieee754_atan2+0x174>)
 80057b6:	e7f6      	b.n	80057a6 <__ieee754_atan2+0x9e>
 80057b8:	4543      	cmp	r3, r8
 80057ba:	d0e4      	beq.n	8005786 <__ieee754_atan2+0x7e>
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80057c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80057c6:	da1e      	bge.n	8005806 <__ieee754_atan2+0xfe>
 80057c8:	2f00      	cmp	r7, #0
 80057ca:	da01      	bge.n	80057d0 <__ieee754_atan2+0xc8>
 80057cc:	323c      	adds	r2, #60	@ 0x3c
 80057ce:	db1e      	blt.n	800580e <__ieee754_atan2+0x106>
 80057d0:	4632      	mov	r2, r6
 80057d2:	463b      	mov	r3, r7
 80057d4:	f7fb f832 	bl	800083c <__aeabi_ddiv>
 80057d8:	ec41 0b10 	vmov	d0, r0, r1
 80057dc:	f000 f9f4 	bl	8005bc8 <fabs>
 80057e0:	f000 f85a 	bl	8005898 <atan>
 80057e4:	ec51 0b10 	vmov	r0, r1, d0
 80057e8:	2c01      	cmp	r4, #1
 80057ea:	d013      	beq.n	8005814 <__ieee754_atan2+0x10c>
 80057ec:	2c02      	cmp	r4, #2
 80057ee:	d015      	beq.n	800581c <__ieee754_atan2+0x114>
 80057f0:	2c00      	cmp	r4, #0
 80057f2:	d0a8      	beq.n	8005746 <__ieee754_atan2+0x3e>
 80057f4:	a318      	add	r3, pc, #96	@ (adr r3, 8005858 <__ieee754_atan2+0x150>)
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f7fa fd3d 	bl	8000278 <__aeabi_dsub>
 80057fe:	a318      	add	r3, pc, #96	@ (adr r3, 8005860 <__ieee754_atan2+0x158>)
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	e014      	b.n	8005830 <__ieee754_atan2+0x128>
 8005806:	a118      	add	r1, pc, #96	@ (adr r1, 8005868 <__ieee754_atan2+0x160>)
 8005808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800580c:	e7ec      	b.n	80057e8 <__ieee754_atan2+0xe0>
 800580e:	2000      	movs	r0, #0
 8005810:	2100      	movs	r1, #0
 8005812:	e7e9      	b.n	80057e8 <__ieee754_atan2+0xe0>
 8005814:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005818:	4619      	mov	r1, r3
 800581a:	e794      	b.n	8005746 <__ieee754_atan2+0x3e>
 800581c:	a30e      	add	r3, pc, #56	@ (adr r3, 8005858 <__ieee754_atan2+0x150>)
 800581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005822:	f7fa fd29 	bl	8000278 <__aeabi_dsub>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	a10d      	add	r1, pc, #52	@ (adr r1, 8005860 <__ieee754_atan2+0x158>)
 800582c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005830:	f7fa fd22 	bl	8000278 <__aeabi_dsub>
 8005834:	e787      	b.n	8005746 <__ieee754_atan2+0x3e>
 8005836:	a10a      	add	r1, pc, #40	@ (adr r1, 8005860 <__ieee754_atan2+0x158>)
 8005838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800583c:	e783      	b.n	8005746 <__ieee754_atan2+0x3e>
 800583e:	a10c      	add	r1, pc, #48	@ (adr r1, 8005870 <__ieee754_atan2+0x168>)
 8005840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005844:	e77f      	b.n	8005746 <__ieee754_atan2+0x3e>
 8005846:	2000      	movs	r0, #0
 8005848:	2100      	movs	r1, #0
 800584a:	e77c      	b.n	8005746 <__ieee754_atan2+0x3e>
 800584c:	a106      	add	r1, pc, #24	@ (adr r1, 8005868 <__ieee754_atan2+0x160>)
 800584e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005852:	e778      	b.n	8005746 <__ieee754_atan2+0x3e>
 8005854:	f3af 8000 	nop.w
 8005858:	33145c07 	.word	0x33145c07
 800585c:	3ca1a626 	.word	0x3ca1a626
 8005860:	54442d18 	.word	0x54442d18
 8005864:	400921fb 	.word	0x400921fb
 8005868:	54442d18 	.word	0x54442d18
 800586c:	3ff921fb 	.word	0x3ff921fb
 8005870:	54442d18 	.word	0x54442d18
 8005874:	3fe921fb 	.word	0x3fe921fb
 8005878:	08005c90 	.word	0x08005c90
 800587c:	08005c78 	.word	0x08005c78
 8005880:	54442d18 	.word	0x54442d18
 8005884:	c00921fb 	.word	0xc00921fb
 8005888:	54442d18 	.word	0x54442d18
 800588c:	bff921fb 	.word	0xbff921fb
 8005890:	7ff00000 	.word	0x7ff00000
 8005894:	00000000 	.word	0x00000000

08005898 <atan>:
 8005898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	ec55 4b10 	vmov	r4, r5, d0
 80058a0:	4bbf      	ldr	r3, [pc, #764]	@ (8005ba0 <atan+0x308>)
 80058a2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80058a6:	429e      	cmp	r6, r3
 80058a8:	46ab      	mov	fp, r5
 80058aa:	d918      	bls.n	80058de <atan+0x46>
 80058ac:	4bbd      	ldr	r3, [pc, #756]	@ (8005ba4 <atan+0x30c>)
 80058ae:	429e      	cmp	r6, r3
 80058b0:	d801      	bhi.n	80058b6 <atan+0x1e>
 80058b2:	d109      	bne.n	80058c8 <atan+0x30>
 80058b4:	b144      	cbz	r4, 80058c8 <atan+0x30>
 80058b6:	4622      	mov	r2, r4
 80058b8:	462b      	mov	r3, r5
 80058ba:	4620      	mov	r0, r4
 80058bc:	4629      	mov	r1, r5
 80058be:	f7fa fcdd 	bl	800027c <__adddf3>
 80058c2:	4604      	mov	r4, r0
 80058c4:	460d      	mov	r5, r1
 80058c6:	e006      	b.n	80058d6 <atan+0x3e>
 80058c8:	f1bb 0f00 	cmp.w	fp, #0
 80058cc:	f340 812b 	ble.w	8005b26 <atan+0x28e>
 80058d0:	a597      	add	r5, pc, #604	@ (adr r5, 8005b30 <atan+0x298>)
 80058d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80058d6:	ec45 4b10 	vmov	d0, r4, r5
 80058da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058de:	4bb2      	ldr	r3, [pc, #712]	@ (8005ba8 <atan+0x310>)
 80058e0:	429e      	cmp	r6, r3
 80058e2:	d813      	bhi.n	800590c <atan+0x74>
 80058e4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80058e8:	429e      	cmp	r6, r3
 80058ea:	d80c      	bhi.n	8005906 <atan+0x6e>
 80058ec:	a392      	add	r3, pc, #584	@ (adr r3, 8005b38 <atan+0x2a0>)
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	4620      	mov	r0, r4
 80058f4:	4629      	mov	r1, r5
 80058f6:	f7fa fcc1 	bl	800027c <__adddf3>
 80058fa:	4bac      	ldr	r3, [pc, #688]	@ (8005bac <atan+0x314>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	f7fb f903 	bl	8000b08 <__aeabi_dcmpgt>
 8005902:	2800      	cmp	r0, #0
 8005904:	d1e7      	bne.n	80058d6 <atan+0x3e>
 8005906:	f04f 3aff 	mov.w	sl, #4294967295
 800590a:	e029      	b.n	8005960 <atan+0xc8>
 800590c:	f000 f95c 	bl	8005bc8 <fabs>
 8005910:	4ba7      	ldr	r3, [pc, #668]	@ (8005bb0 <atan+0x318>)
 8005912:	429e      	cmp	r6, r3
 8005914:	ec55 4b10 	vmov	r4, r5, d0
 8005918:	f200 80bc 	bhi.w	8005a94 <atan+0x1fc>
 800591c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005920:	429e      	cmp	r6, r3
 8005922:	f200 809e 	bhi.w	8005a62 <atan+0x1ca>
 8005926:	4622      	mov	r2, r4
 8005928:	462b      	mov	r3, r5
 800592a:	4620      	mov	r0, r4
 800592c:	4629      	mov	r1, r5
 800592e:	f7fa fca5 	bl	800027c <__adddf3>
 8005932:	4b9e      	ldr	r3, [pc, #632]	@ (8005bac <atan+0x314>)
 8005934:	2200      	movs	r2, #0
 8005936:	f7fa fc9f 	bl	8000278 <__aeabi_dsub>
 800593a:	2200      	movs	r2, #0
 800593c:	4606      	mov	r6, r0
 800593e:	460f      	mov	r7, r1
 8005940:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005944:	4620      	mov	r0, r4
 8005946:	4629      	mov	r1, r5
 8005948:	f7fa fc98 	bl	800027c <__adddf3>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4630      	mov	r0, r6
 8005952:	4639      	mov	r1, r7
 8005954:	f7fa ff72 	bl	800083c <__aeabi_ddiv>
 8005958:	f04f 0a00 	mov.w	sl, #0
 800595c:	4604      	mov	r4, r0
 800595e:	460d      	mov	r5, r1
 8005960:	4622      	mov	r2, r4
 8005962:	462b      	mov	r3, r5
 8005964:	4620      	mov	r0, r4
 8005966:	4629      	mov	r1, r5
 8005968:	f7fa fe3e 	bl	80005e8 <__aeabi_dmul>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4680      	mov	r8, r0
 8005972:	4689      	mov	r9, r1
 8005974:	f7fa fe38 	bl	80005e8 <__aeabi_dmul>
 8005978:	a371      	add	r3, pc, #452	@ (adr r3, 8005b40 <atan+0x2a8>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	4606      	mov	r6, r0
 8005980:	460f      	mov	r7, r1
 8005982:	f7fa fe31 	bl	80005e8 <__aeabi_dmul>
 8005986:	a370      	add	r3, pc, #448	@ (adr r3, 8005b48 <atan+0x2b0>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f7fa fc76 	bl	800027c <__adddf3>
 8005990:	4632      	mov	r2, r6
 8005992:	463b      	mov	r3, r7
 8005994:	f7fa fe28 	bl	80005e8 <__aeabi_dmul>
 8005998:	a36d      	add	r3, pc, #436	@ (adr r3, 8005b50 <atan+0x2b8>)
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f7fa fc6d 	bl	800027c <__adddf3>
 80059a2:	4632      	mov	r2, r6
 80059a4:	463b      	mov	r3, r7
 80059a6:	f7fa fe1f 	bl	80005e8 <__aeabi_dmul>
 80059aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8005b58 <atan+0x2c0>)
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f7fa fc64 	bl	800027c <__adddf3>
 80059b4:	4632      	mov	r2, r6
 80059b6:	463b      	mov	r3, r7
 80059b8:	f7fa fe16 	bl	80005e8 <__aeabi_dmul>
 80059bc:	a368      	add	r3, pc, #416	@ (adr r3, 8005b60 <atan+0x2c8>)
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f7fa fc5b 	bl	800027c <__adddf3>
 80059c6:	4632      	mov	r2, r6
 80059c8:	463b      	mov	r3, r7
 80059ca:	f7fa fe0d 	bl	80005e8 <__aeabi_dmul>
 80059ce:	a366      	add	r3, pc, #408	@ (adr r3, 8005b68 <atan+0x2d0>)
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	f7fa fc52 	bl	800027c <__adddf3>
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	f7fa fe04 	bl	80005e8 <__aeabi_dmul>
 80059e0:	a363      	add	r3, pc, #396	@ (adr r3, 8005b70 <atan+0x2d8>)
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	4680      	mov	r8, r0
 80059e8:	4689      	mov	r9, r1
 80059ea:	4630      	mov	r0, r6
 80059ec:	4639      	mov	r1, r7
 80059ee:	f7fa fdfb 	bl	80005e8 <__aeabi_dmul>
 80059f2:	a361      	add	r3, pc, #388	@ (adr r3, 8005b78 <atan+0x2e0>)
 80059f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f8:	f7fa fc3e 	bl	8000278 <__aeabi_dsub>
 80059fc:	4632      	mov	r2, r6
 80059fe:	463b      	mov	r3, r7
 8005a00:	f7fa fdf2 	bl	80005e8 <__aeabi_dmul>
 8005a04:	a35e      	add	r3, pc, #376	@ (adr r3, 8005b80 <atan+0x2e8>)
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f7fa fc35 	bl	8000278 <__aeabi_dsub>
 8005a0e:	4632      	mov	r2, r6
 8005a10:	463b      	mov	r3, r7
 8005a12:	f7fa fde9 	bl	80005e8 <__aeabi_dmul>
 8005a16:	a35c      	add	r3, pc, #368	@ (adr r3, 8005b88 <atan+0x2f0>)
 8005a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1c:	f7fa fc2c 	bl	8000278 <__aeabi_dsub>
 8005a20:	4632      	mov	r2, r6
 8005a22:	463b      	mov	r3, r7
 8005a24:	f7fa fde0 	bl	80005e8 <__aeabi_dmul>
 8005a28:	a359      	add	r3, pc, #356	@ (adr r3, 8005b90 <atan+0x2f8>)
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	f7fa fc23 	bl	8000278 <__aeabi_dsub>
 8005a32:	4632      	mov	r2, r6
 8005a34:	463b      	mov	r3, r7
 8005a36:	f7fa fdd7 	bl	80005e8 <__aeabi_dmul>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4640      	mov	r0, r8
 8005a40:	4649      	mov	r1, r9
 8005a42:	f7fa fc1b 	bl	800027c <__adddf3>
 8005a46:	4622      	mov	r2, r4
 8005a48:	462b      	mov	r3, r5
 8005a4a:	f7fa fdcd 	bl	80005e8 <__aeabi_dmul>
 8005a4e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	d148      	bne.n	8005aea <atan+0x252>
 8005a58:	4620      	mov	r0, r4
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f7fa fc0c 	bl	8000278 <__aeabi_dsub>
 8005a60:	e72f      	b.n	80058c2 <atan+0x2a>
 8005a62:	4b52      	ldr	r3, [pc, #328]	@ (8005bac <atan+0x314>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	4620      	mov	r0, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	f7fa fc05 	bl	8000278 <__aeabi_dsub>
 8005a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8005bac <atan+0x314>)
 8005a70:	4606      	mov	r6, r0
 8005a72:	460f      	mov	r7, r1
 8005a74:	2200      	movs	r2, #0
 8005a76:	4620      	mov	r0, r4
 8005a78:	4629      	mov	r1, r5
 8005a7a:	f7fa fbff 	bl	800027c <__adddf3>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4630      	mov	r0, r6
 8005a84:	4639      	mov	r1, r7
 8005a86:	f7fa fed9 	bl	800083c <__aeabi_ddiv>
 8005a8a:	f04f 0a01 	mov.w	sl, #1
 8005a8e:	4604      	mov	r4, r0
 8005a90:	460d      	mov	r5, r1
 8005a92:	e765      	b.n	8005960 <atan+0xc8>
 8005a94:	4b47      	ldr	r3, [pc, #284]	@ (8005bb4 <atan+0x31c>)
 8005a96:	429e      	cmp	r6, r3
 8005a98:	d21c      	bcs.n	8005ad4 <atan+0x23c>
 8005a9a:	4b47      	ldr	r3, [pc, #284]	@ (8005bb8 <atan+0x320>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	f7fa fbe9 	bl	8000278 <__aeabi_dsub>
 8005aa6:	4b44      	ldr	r3, [pc, #272]	@ (8005bb8 <atan+0x320>)
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	460f      	mov	r7, r1
 8005aac:	2200      	movs	r2, #0
 8005aae:	4620      	mov	r0, r4
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	f7fa fd99 	bl	80005e8 <__aeabi_dmul>
 8005ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8005bac <atan+0x314>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f7fa fbdf 	bl	800027c <__adddf3>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	4639      	mov	r1, r7
 8005ac6:	f7fa feb9 	bl	800083c <__aeabi_ddiv>
 8005aca:	f04f 0a02 	mov.w	sl, #2
 8005ace:	4604      	mov	r4, r0
 8005ad0:	460d      	mov	r5, r1
 8005ad2:	e745      	b.n	8005960 <atan+0xc8>
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	462b      	mov	r3, r5
 8005ad8:	4938      	ldr	r1, [pc, #224]	@ (8005bbc <atan+0x324>)
 8005ada:	2000      	movs	r0, #0
 8005adc:	f7fa feae 	bl	800083c <__aeabi_ddiv>
 8005ae0:	f04f 0a03 	mov.w	sl, #3
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	460d      	mov	r5, r1
 8005ae8:	e73a      	b.n	8005960 <atan+0xc8>
 8005aea:	4b35      	ldr	r3, [pc, #212]	@ (8005bc0 <atan+0x328>)
 8005aec:	4e35      	ldr	r6, [pc, #212]	@ (8005bc4 <atan+0x32c>)
 8005aee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f7fa fbbf 	bl	8000278 <__aeabi_dsub>
 8005afa:	4622      	mov	r2, r4
 8005afc:	462b      	mov	r3, r5
 8005afe:	f7fa fbbb 	bl	8000278 <__aeabi_dsub>
 8005b02:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005b0e:	f7fa fbb3 	bl	8000278 <__aeabi_dsub>
 8005b12:	f1bb 0f00 	cmp.w	fp, #0
 8005b16:	4604      	mov	r4, r0
 8005b18:	460d      	mov	r5, r1
 8005b1a:	f6bf aedc 	bge.w	80058d6 <atan+0x3e>
 8005b1e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005b22:	461d      	mov	r5, r3
 8005b24:	e6d7      	b.n	80058d6 <atan+0x3e>
 8005b26:	a51c      	add	r5, pc, #112	@ (adr r5, 8005b98 <atan+0x300>)
 8005b28:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005b2c:	e6d3      	b.n	80058d6 <atan+0x3e>
 8005b2e:	bf00      	nop
 8005b30:	54442d18 	.word	0x54442d18
 8005b34:	3ff921fb 	.word	0x3ff921fb
 8005b38:	8800759c 	.word	0x8800759c
 8005b3c:	7e37e43c 	.word	0x7e37e43c
 8005b40:	e322da11 	.word	0xe322da11
 8005b44:	3f90ad3a 	.word	0x3f90ad3a
 8005b48:	24760deb 	.word	0x24760deb
 8005b4c:	3fa97b4b 	.word	0x3fa97b4b
 8005b50:	a0d03d51 	.word	0xa0d03d51
 8005b54:	3fb10d66 	.word	0x3fb10d66
 8005b58:	c54c206e 	.word	0xc54c206e
 8005b5c:	3fb745cd 	.word	0x3fb745cd
 8005b60:	920083ff 	.word	0x920083ff
 8005b64:	3fc24924 	.word	0x3fc24924
 8005b68:	5555550d 	.word	0x5555550d
 8005b6c:	3fd55555 	.word	0x3fd55555
 8005b70:	2c6a6c2f 	.word	0x2c6a6c2f
 8005b74:	bfa2b444 	.word	0xbfa2b444
 8005b78:	52defd9a 	.word	0x52defd9a
 8005b7c:	3fadde2d 	.word	0x3fadde2d
 8005b80:	af749a6d 	.word	0xaf749a6d
 8005b84:	3fb3b0f2 	.word	0x3fb3b0f2
 8005b88:	fe231671 	.word	0xfe231671
 8005b8c:	3fbc71c6 	.word	0x3fbc71c6
 8005b90:	9998ebc4 	.word	0x9998ebc4
 8005b94:	3fc99999 	.word	0x3fc99999
 8005b98:	54442d18 	.word	0x54442d18
 8005b9c:	bff921fb 	.word	0xbff921fb
 8005ba0:	440fffff 	.word	0x440fffff
 8005ba4:	7ff00000 	.word	0x7ff00000
 8005ba8:	3fdbffff 	.word	0x3fdbffff
 8005bac:	3ff00000 	.word	0x3ff00000
 8005bb0:	3ff2ffff 	.word	0x3ff2ffff
 8005bb4:	40038000 	.word	0x40038000
 8005bb8:	3ff80000 	.word	0x3ff80000
 8005bbc:	bff00000 	.word	0xbff00000
 8005bc0:	08005ca8 	.word	0x08005ca8
 8005bc4:	08005cc8 	.word	0x08005cc8

08005bc8 <fabs>:
 8005bc8:	ec51 0b10 	vmov	r0, r1, d0
 8005bcc:	4602      	mov	r2, r0
 8005bce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005bd2:	ec43 2b10 	vmov	d0, r2, r3
 8005bd6:	4770      	bx	lr

08005bd8 <_init>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr

08005be4 <_fini>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr
